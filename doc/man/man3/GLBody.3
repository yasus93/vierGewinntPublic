.TH "GLBody" 3 "Mon Feb 25 2019" "4Gewinnt" \" -*- nroff -*-
.ad l
.nh
.SH NAME
GLBody \- A 3D body that uses a \fBGLESRenderer\fP for drawing and \fBGLPoint\fP objects for defining its surface\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <glbody\&.h>\fP
.PP
Inherited by \fBBoard\fP, and \fBGLDisc\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBGLBody\fP (const QString &\fBname\fP, float radius=1\&.0, const \fBGLColorRgba\fP &\fBm_color\fP=\fBGLColorRgba::clBlue\fP, const QString m_textureFile='')"
.br
.ti -1c
.RI "\fBGLBody\fP (QString \fBname\fP, const QVector3D offset)"
.br
.RI "\fBGLBody\fP Constructor does NOT create the surface\&. "
.ti -1c
.RI "virtual \fB~GLBody\fP ()"
.br
.ti -1c
.RI "virtual void \fBmakeSurface\fP (QVector< \fBGLPoint\fP > *pointContainer, QVector< \fBIndexType\fP > *indexContainer)"
.br
.ti -1c
.RI "\fBIndexType\fP \fBpointsSize\fP ()"
.br
.RI "pointsSize Convenience function to avoid multiple casting "
.ti -1c
.RI "\fBIndexType\fP \fBindicesSize\fP ()"
.br
.RI "indicesSize Convenience function to avoid multiple casting "
.ti -1c
.RI "virtual bool \fBreadBinaryModelFile\fP (const QString &dataFileName, QVector< \fBGLPoint\fP > *pointContainer=nullptr, QVector< GLushort > *indexContainer=nullptr)"
.br
.RI "readBinaryFile File format: 4 bytes uint number of GlPoints, 4 bytes uint number of uint indices number of points GlPoint objects followed by number of indices indices "
.ti -1c
.RI "virtual void \fBrotateModelPoints\fP (const QVector3D &axisCenter, const QVector3D &axisDirection, float angle)"
.br
.RI "rotateModelPoints Rotates model points around axis "
.ti -1c
.RI "virtual void \fBcalculateDrawMatrix\fP ()"
.br
.RI "calculateDrawMatrix Virtual function to calculate the final matrix to be used for drawing\&. May be overwritten in subclasses\&. \fBGLBody::calculateDrawMatrix\fP simply copies m_transformationMatrix\&. "
.ti -1c
.RI "virtual void \fBdraw\fP (\fBGLESRenderer\fP *renderer, bool useBuffers=false)"
.br
.ti -1c
.RI "virtual bool \fBisHit\fP (QVector3D p1, QVector3D p2)"
.br
.ti -1c
.RI "virtual bool \fBisCubeHit\fP (QVector3D mouseNear, QVector3D mouseFar)"
.br
.RI "isCubeHit "
.ti -1c
.RI "virtual bool \fBisHit\fP (QPoint mousePos, \fBGLESRenderer\fP *renderer)"
.br
.RI "isHit "
.ti -1c
.RI "virtual bool \fBspheresAreColliding\fP (const \fBGLBody\fP *other)"
.br
.ti -1c
.RI "bool \fBcreateTextureObjects\fP (GLenum minfilter=GL_LINEAR_MIPMAP_NEAREST, GLenum magfilter=GL_LINEAR, GLenum wrapmode=GL_CLAMP_TO_EDGE)"
.br
.ti -1c
.RI "void \fBdeleteTextureObjects\fP ()"
.br
.RI "deleteTextureObjects delete all texture objects from m_textureIds "
.ti -1c
.RI "bool \fBsetTextureFile\fP (const QString &textureFile)"
.br
.ti -1c
.RI "bool \fBsetTextureFiles\fP (const QStringList &textureFiles)"
.br
.RI "setTextures Alle Texturen aus textureFiles laden\&. "
.ti -1c
.RI "void \fBmove\fP (QVector3D vMove)"
.br
.ti -1c
.RI "virtual void \fBstartAnimation\fP (float startValue=0\&.0)"
.br
.RI "startAnimation Start an animation process\&. Sets animationActive to true\&. Overwrite in subclasses to set Begin and End values for animated properties\&. "
.ti -1c
.RI "virtual void \fBfinishAnimation\fP ()"
.br
.RI "finishAnimation Finish an animation process\&. Sets animationActive to false\&. Overwrite in subclasses to copy End values for animated properties to Begin values\&. "
.ti -1c
.RI "bool \fBisAnimationActive\fP ()"
.br
.RI "isAnaimationActive "
.ti -1c
.RI "float \fBlocalAnimationState\fP (float globalAnimationState)"
.br
.RI "localAnimationState "
.ti -1c
.RI "virtual void \fBanimateForwards\fP ()"
.br
.RI "animateForwards Start upwards animation "
.ti -1c
.RI "virtual void \fBanimateBackwards\fP ()"
.br
.RI "animateBackwards Start downwards animation "
.ti -1c
.RI "virtual void \fBupdateAnimatedProperties\fP (float animationState)"
.br
.RI "updateAnimatedProperties Overwrite to set current values of animated properties\&. "
.ti -1c
.RI "bool \fBisSelected\fP ()"
.br
.ti -1c
.RI "const QVector3D & \fBgetCenter\fP () const"
.br
.ti -1c
.RI "void \fBsetColor\fP (const \fBGLColorRgba\fP &newVal)"
.br
.ti -1c
.RI "void \fBsetSpecularColor\fP (const \fBGLColorRgba\fP &newVal)"
.br
.ti -1c
.RI "void \fBsetShininess\fP (int newVal)"
.br
.ti -1c
.RI "void \fBsetSelected\fP (bool newVal)"
.br
.ti -1c
.RI "void \fBsetDrawingMode\fP (GLuint newVal)"
.br
.ti -1c
.RI "void \fBsetTransformation\fP (const QMatrix4x4 &transformation)"
.br
.ti -1c
.RI "void \fBsetModelOffset\fP (const QVector3D &offset)"
.br
.ti -1c
.RI "const \fBGLColorRgba\fP & \fBgetColor\fP () const"
.br
.ti -1c
.RI "const QMatrix4x4 & \fBgetTransformation\fP () const"
.br
.ti -1c
.RI "const QString & \fBname\fP () const"
.br
.ti -1c
.RI "float \fBgetRadius\fP () const"
.br
.ti -1c
.RI "void \fBsetActiveTextureIndex\fP (int i)"
.br
.RI "setTextureIndex "
.ti -1c
.RI "void \fBsetCenter\fP (const QVector3D &newVal)"
.br
.ti -1c
.RI "void \fBsetScale\fP (float scale)"
.br
.ti -1c
.RI "void \fBshowFrame\fP (bool show)"
.br
.ti -1c
.RI "void \fBshowNormals\fP (bool show)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static bool \fBisTriangleHit\fP (const QVector3D &p1, const QVector3D &p2, const QVector3D &p3, const QVector3D &pLine, const QVector3D &lineDirection, QVector3D *intersection=nullptr)"
.br
.RI "isTriangleHit "
.ti -1c
.RI "static bool \fBisParallelogramHit\fP (const QVector3D &p1, const QVector3D &p2, const QVector3D &p3, const QVector3D &pLine, const QVector3D &lineDirection, QVector3D *intersection=nullptr)"
.br
.RI "isParallelogramHit "
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "void \fBcreateNormals\fP ()"
.br
.ti -1c
.RI "void \fBcreateFrame\fP ()"
.br
.ti -1c
.RI "void \fBinit\fP ()"
.br
.RI "init Initialize \fBGLBody\fP with defaults\&. "
.ti -1c
.RI "void \fBactivateAttributeBuffers\fP (\fBGLESRenderer\fP *renderer)"
.br
.ti -1c
.RI "void \fBactivateAttributeArrays\fP (\fBGLESRenderer\fP *renderer)"
.br
.ti -1c
.RI "void \fBfindMinMaxCoordinates\fP ()"
.br
.RI "findMinMaxCoordinates Calculate m_minCoordinate an m_maxCoordinate from vertex data\&. Create frame if m_showFrame is set\&. Create normals if m_showNormals is set\&. "
.in -1c
.SS "Static Protected Member Functions"

.in +1c
.ti -1c
.RI "static bool \fBcalculateIntersection\fP (const QVector3D &p1, const QVector3D &p2, const QVector3D &p3, const QVector3D &pLine, const QVector3D &lineDirection, float *a, float *b, QVector3D *intersection=nullptr)"
.br
.RI "calculateIntersection Calculate intersection of line with plane defined by p1,p2,p3 Calculates factors a and b\&. Resulting coordinates are p1 + a * p12 + b * p13\&. Intersection is inside parallelogram p12, p13 when a and b are > 0 and < 1\&.0 "
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "QString \fBm_name\fP"
.br
.ti -1c
.RI "QVector3D \fBm_center\fP"
.br
.ti -1c
.RI "QVector3D \fBm_minCoordinate\fP"
.br
.RI "m_minCoordinate The left bottom back corner of the enclosing cube "
.ti -1c
.RI "QVector3D \fBm_maxCoordinate\fP"
.br
.RI "m_maxCoordinate The right top front corner of the enclosing cube "
.ti -1c
.RI "GLfloat \fBm_radius\fP"
.br
.ti -1c
.RI "GLuint \fBm_drawingMode\fP"
.br
.ti -1c
.RI "bool \fBm_animationActive\fP"
.br
.RI "m_animationActive Flag for a running animation "
.ti -1c
.RI "float \fBm_animationStart\fP"
.br
.RI "m_animationStart The value of the animation state when this function is called\&. e\&.g\&. 0\&.5 if the global animation process is already half finished\&. "
.ti -1c
.RI "bool \fBm_animateForwards\fP"
.br
.RI "m_animateForwards Animate to final state or back to start state "
.ti -1c
.RI "QVector< \fBGLPoint\fP > * \fBm_points\fP"
.br
.ti -1c
.RI "bool \fBm_ownPointsContainer\fP"
.br
.RI "ownPointsContainer Set this Flag, if points container was created by this body\&. "
.ti -1c
.RI "GLushort \fBm_firstPoint\fP"
.br
.RI "firstPoint The firstPoint for this body "
.ti -1c
.RI "GLushort \fBm_nextPoint\fP"
.br
.RI "lastPoint The next point for this body\&. ( last point +1) "
.ti -1c
.RI "QVector< GLushort > * \fBm_indices\fP"
.br
.ti -1c
.RI "bool \fBm_ownIndexContainer\fP"
.br
.RI "ownPointsContainer Set this Flag, if points container was created by this body\&. "
.ti -1c
.RI "GLushort \fBm_firstIndex\fP"
.br
.RI "startIndex The first index for this body "
.ti -1c
.RI "GLushort \fBm_nextIndex\fP"
.br
.RI "indexCount The next index for this body\&. (last index + 1) "
.ti -1c
.RI "bool \fBm_surfaceIsValid\fP"
.br
.ti -1c
.RI "QVector< QOpenGLTexture * > \fBm_textures\fP"
.br
.RI "m_textures The textures to be used with this body "
.ti -1c
.RI "QVector< GLuint > \fBm_textureIds\fP"
.br
.ti -1c
.RI "int \fBm_activeTextureIndex\fP"
.br
.ti -1c
.RI "QStringList \fBm_textureFilenames\fP"
.br
.ti -1c
.RI "\fBGLColorRgba\fP \fBm_color\fP"
.br
.ti -1c
.RI "\fBGLColorRgba\fP \fBm_specularColor\fP"
.br
.ti -1c
.RI "int \fBm_shininess\fP"
.br
.ti -1c
.RI "bool \fBm_selected\fP"
.br
.ti -1c
.RI "QVector3D \fBm_modelOffset\fP"
.br
.ti -1c
.RI "QMatrix4x4 \fBm_transformationMatrix\fP"
.br
.ti -1c
.RI "QMatrix4x4 \fBm_drawMatrix\fP"
.br
.RI "m_drawMatrix This matrix is multiplied with the modelview matrix prior to rendering the body\&. "
.ti -1c
.RI "float \fBm_scale\fP"
.br
.RI "m_scale "
.ti -1c
.RI "\fBIndexType\fP \fBm_firstNormalPoint\fP"
.br
.ti -1c
.RI "\fBIndexType\fP \fBm_nextNormalPoint\fP"
.br
.ti -1c
.RI "\fBIndexType\fP \fBm_firstFramePoint\fP"
.br
.ti -1c
.RI "\fBIndexType\fP \fBm_nextFramePoint\fP"
.br
.ti -1c
.RI "\fBIndexType\fP \fBm_firstNormalIndex\fP"
.br
.ti -1c
.RI "\fBIndexType\fP \fBm_nextNormalIndex\fP"
.br
.ti -1c
.RI "\fBIndexType\fP \fBm_firstFrameIndex\fP"
.br
.ti -1c
.RI "\fBIndexType\fP \fBm_nextFrameIndex\fP"
.br
.ti -1c
.RI "\fBIndexType\fP \fBm_firstHitPoint\fP"
.br
.ti -1c
.RI "\fBIndexType\fP \fBm_nextHitPoint\fP"
.br
.ti -1c
.RI "bool \fBm_showNormals\fP"
.br
.ti -1c
.RI "bool \fBm_showFrame\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
A 3D body that uses a \fBGLESRenderer\fP for drawing and \fBGLPoint\fP objects for defining its surface\&. 

Overwrite \fBmakeSurface()\fP in subclasses to create the GLPoints that form the surface\&. Set drawingMode to GL_LINE_STRIP or GL_LINES for debugging the surface\&. Default is GL_TRIANGLE_STRIP\&. Vertices and indices may be stored in external or internal containers\&. If GlBody::makeSurface is called with pointers to existing containers, these will be used\&. Otherwise GlBody::makeSurface will create new containers\&. Only in this case, the destructor will delete the containers\&. Overwrite \fBdraw()\fP if you do need special drawing procedures\&. 
.PP
Definition at line 40 of file glbody\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "GLBody::GLBody (const QString & name, float radius = \fC1\&.0\fP, const \fBGLColorRgba\fP & color = \fC\fBGLColorRgba::clBlue\fP\fP, const QString textureFile = \fC''\fP)"
Constructor does NOT create the surface\&. 
.PP
Definition at line 30 of file glbody\&.cpp\&.
.SS "GLBody::GLBody (QString name, const QVector3D offset)"

.PP
\fBGLBody\fP Constructor does NOT create the surface\&. 
.PP
\fBParameters:\fP
.RS 4
\fIoffset\fP The offset from coordinate origin to modeldata zero\&. 
.RE
.PP

.PP
Definition at line 42 of file glbody\&.cpp\&.
.SS "GLBody::~GLBody ()\fC [virtual]\fP"
Destructor will delete created containers\&.
.PP
Destructor 
.PP
Definition at line 114 of file glbody\&.cpp\&.
.SH "Member Function Documentation"
.PP 
.SS "void GLBody::activateAttributeArrays (\fBGLESRenderer\fP * renderer)\fC [protected]\fP"

.PP
Definition at line 96 of file glbody\&.cpp\&.
.SS "void GLBody::activateAttributeBuffers (\fBGLESRenderer\fP * renderer)\fC [protected]\fP"

.PP
Definition at line 86 of file glbody\&.cpp\&.
.SS "void GLBody::animateBackwards ()\fC [virtual]\fP"

.PP
animateBackwards Start downwards animation 
.PP
Definition at line 471 of file glbody\&.cpp\&.
.SS "void GLBody::animateForwards ()\fC [virtual]\fP"

.PP
animateForwards Start upwards animation 
.PP
Definition at line 465 of file glbody\&.cpp\&.
.SS "void GLBody::calculateDrawMatrix ()\fC [virtual]\fP"

.PP
calculateDrawMatrix Virtual function to calculate the final matrix to be used for drawing\&. May be overwritten in subclasses\&. \fBGLBody::calculateDrawMatrix\fP simply copies m_transformationMatrix\&. 
.PP
Definition at line 223 of file glbody\&.cpp\&.
.SS "bool GLBody::calculateIntersection (const QVector3D & p1, const QVector3D & p2, const QVector3D & p3, const QVector3D & pLine, const QVector3D & lineDirection, float * a, float * b, QVector3D * intersection = \fCnullptr\fP)\fC [static]\fP, \fC [protected]\fP"

.PP
calculateIntersection Calculate intersection of line with plane defined by p1,p2,p3 Calculates factors a and b\&. Resulting coordinates are p1 + a * p12 + b * p13\&. Intersection is inside parallelogram p12, p13 when a and b are > 0 and < 1\&.0 
.PP
\fBParameters:\fP
.RS 4
\fIp1\fP 
.br
\fIp2\fP 
.br
\fIp3\fP 
.br
\fIpLine\fP Point on Line 
.br
\fIlineDirection\fP 
.br
\fIa\fP Multiple of p12 
.br
\fIb\fP Multiple of p13 
.br
\fIintersection\fP Coordinates of intersection 
.RE
.PP
\fBReturns:\fP
.RS 4
True if an intersection exists\&. 
.RE
.PP

.PP
Definition at line 581 of file glbody\&.cpp\&.
.SS "void GLBody::createFrame ()\fC [protected]\fP"

.PP
Definition at line 628 of file glbody\&.cpp\&.
.SS "void GLBody::createNormals ()\fC [protected]\fP"

.PP
Definition at line 610 of file glbody\&.cpp\&.
.SS "bool GLBody::createTextureObjects (GLenum minfilter = \fCGL_LINEAR_MIPMAP_NEAREST\fP, GLenum magfilter = \fCGL_LINEAR\fP, GLenum wrapmode = \fCGL_CLAMP_TO_EDGE\fP)"
Set textures from files\&. Returns true on success\&. Needs a current OpenGL context\&.
.PP
Set texture objects from files in m_TextureFileNames\&. Returns true on success 
.PP
Definition at line 331 of file glbody\&.cpp\&.
.SS "void GLBody::deleteTextureObjects ()"

.PP
deleteTextureObjects delete all texture objects from m_textureIds 
.PP
Definition at line 402 of file glbody\&.cpp\&.
.SS "void GLBody::draw (\fBGLESRenderer\fP * renderer, bool useBuffers = \fCfalse\fP)\fC [virtual]\fP"
Draws the surface and calls makeSurface if required\&. Needs an active (made current) GL-Context\&. 
.PP
Reimplemented in \fBGLDisc\fP\&.
.PP
Definition at line 231 of file glbody\&.cpp\&.
.SS "void GLBody::findMinMaxCoordinates ()\fC [protected]\fP"

.PP
findMinMaxCoordinates Calculate m_minCoordinate an m_maxCoordinate from vertex data\&. Create frame if m_showFrame is set\&. Create normals if m_showNormals is set\&. 
.PP
Definition at line 748 of file glbody\&.cpp\&.
.SS "void GLBody::finishAnimation ()\fC [virtual]\fP"

.PP
finishAnimation Finish an animation process\&. Sets animationActive to false\&. Overwrite in subclasses to copy End values for animated properties to Begin values\&. 
.PP
Definition at line 453 of file glbody\&.cpp\&.
.SS "const QVector3D& GLBody::getCenter () const\fC [inline]\fP"

.PP
Definition at line 235 of file glbody\&.h\&.
.SS "const \fBGLColorRgba\fP& GLBody::getColor () const\fC [inline]\fP"

.PP
Definition at line 246 of file glbody\&.h\&.
.SS "float GLBody::getRadius () const\fC [inline]\fP"

.PP
Definition at line 249 of file glbody\&.h\&.
.SS "const QMatrix4x4& GLBody::getTransformation () const\fC [inline]\fP"

.PP
Definition at line 247 of file glbody\&.h\&.
.SS "\fBIndexType\fP GLBody::indicesSize ()\fC [inline]\fP"

.PP
indicesSize Convenience function to avoid multiple casting 
.PP
\fBReturns:\fP
.RS 4
m_indices->size() 
.RE
.PP

.PP
Definition at line 87 of file glbody\&.h\&.
.SS "void GLBody::init ()\fC [protected]\fP"

.PP
init Initialize \fBGLBody\fP with defaults\&. 
.PP
Definition at line 49 of file glbody\&.cpp\&.
.SS "bool GLBody::isAnimationActive ()\fC [inline]\fP"

.PP
isAnaimationActive 
.PP
\fBReturns:\fP
.RS 4
True, if an animation is in progress\&. 
.RE
.PP

.PP
Definition at line 209 of file glbody\&.h\&.
.SS "bool GLBody::isCubeHit (QVector3D mouseNear, QVector3D mouseFar)\fC [virtual]\fP"

.PP
isCubeHit 
.PP
\fBParameters:\fP
.RS 4
\fImouseNear\fP Point 1 on line in model space 
.br
\fImouseFar\fP Point 2 on line in model space 
.RE
.PP
\fBReturns:\fP
.RS 4
True if line defined by mouseNear and mouseFar intersects cube defined by m_minCoordinate and m_maxCoordinate 
.RE
.PP

.PP
Definition at line 501 of file glbody\&.cpp\&.
.SS "bool GLBody::isHit (QVector3D p1, QVector3D p2)\fC [virtual]\fP"
Returns true, when line through p1 and p2 intersects body sphere True if line through p1 and p2 intersects cube defined by minCoordinates and maxCoordinates\&. To be overwritten by subclasses\&.
.PP
Returns true, when line through p1 and p2 intersects body shpere True if line through p1 and p2 intersects cube defined by minCoordinates and maxCoordinates\&. 
.PP
Definition at line 487 of file glbody\&.cpp\&.
.SS "bool GLBody::isHit (QPoint mousePos, \fBGLESRenderer\fP * renderer)\fC [virtual]\fP"

.PP
isHit 
.PP
\fBReturns:\fP
.RS 4
True if line defined by mousePos intersects cube defined by minCoordinates and maxCoordinates\&. 
.RE
.PP

.PP
Definition at line 713 of file glbody\&.cpp\&.
.SS "bool GLBody::isParallelogramHit (const QVector3D & p1, const QVector3D & p2, const QVector3D & p3, const QVector3D & pLine, const QVector3D & lineDirection, QVector3D * intersection = \fCnullptr\fP)\fC [static]\fP"

.PP
isParallelogramHit 
.PP
\fBParameters:\fP
.RS 4
\fIp1\fP Triangle point 1 
.br
\fIp2\fP Triangle point 2 
.br
\fIp3\fP Triangle point 3 
.br
\fIpLine\fP Point on line 
.br
\fIlineDirection\fP Direction of line 
.br
\fIintersection\fP If not nullptr, coordinates of intersection are written to *intersection\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
True, if plane defined by p1, p2, p3 is intersected by line inside the parallelogram (rectangle) formed by p1, p2, p3\&. 
.RE
.PP

.PP
Definition at line 572 of file glbody\&.cpp\&.
.SS "bool GLBody::isSelected ()\fC [inline]\fP"
Simple gettters 
.PP
Definition at line 234 of file glbody\&.h\&.
.SS "bool GLBody::isTriangleHit (const QVector3D & p1, const QVector3D & p2, const QVector3D & p3, const QVector3D & pLine, const QVector3D & lineDirection, QVector3D * intersection = \fCnullptr\fP)\fC [static]\fP"

.PP
isTriangleHit 
.PP
\fBParameters:\fP
.RS 4
\fIp1\fP Triangle point 1 
.br
\fIp2\fP Triangle point 2 
.br
\fIp3\fP Triangle point 3 
.br
\fIpLine\fP Point on line 
.br
\fIlineDirection\fP Direction of line 
.br
\fIintersection\fP If not nullptr, coordinates of intersection are written to *intersection\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
True, if plane defined by p1, p2, p3 is intersected by line inside the triangle formed by p1, p2, p3\&. 
.RE
.PP

.PP
Definition at line 562 of file glbody\&.cpp\&.
.SS "float GLBody::localAnimationState (float globalAnimationState)"

.PP
localAnimationState 
.PP
\fBReturns:\fP
.RS 4
State in the range from m_animationStart to 1\&.0 
.RE
.PP

.PP
Definition at line 458 of file glbody\&.cpp\&.
.SS "void GLBody::makeSurface (QVector< \fBGLPoint\fP > * pointContainer, QVector< \fBIndexType\fP > * indexContainer)\fC [virtual]\fP"
Creates the surface\&. Should be called, when a GL engine is already running\&. To be overwritten by subclasses\&. GLESBody::createSurface should be called at the beginning of overriding functions\&. It will create the pointContainer, if none is supplied Is called automatically by draw, if required\&. MUST NOT be called without a working GL engine\&.
.PP
\fBParameters:\fP
.RS 4
\fIpointContainer\fP The container for the geometry data\&. If nullptr, a new one is created\&. 
.br
\fIindexContainer\fP The container for the index data\&. If nullptr, a new one is created\&. Created containers will be deleted by destructor\&.
.RE
.PP
Creates the surface\&. Should be called, when a GL engine is already running\&. Is called automatically by draw, if required\&. 
.PP
Reimplemented in \fBBoard\fP\&.
.PP
Definition at line 126 of file glbody\&.cpp\&.
.SS "void GLBody::move (QVector3D vMove)"
Moves the body by adding vMove to all vertices\&. 
.PP
Definition at line 439 of file glbody\&.cpp\&.
.SS "const QString& GLBody::name () const\fC [inline]\fP"

.PP
Definition at line 248 of file glbody\&.h\&.
.SS "\fBIndexType\fP GLBody::pointsSize ()\fC [inline]\fP"

.PP
pointsSize Convenience function to avoid multiple casting 
.PP
\fBReturns:\fP
.RS 4
m_points->size() 
.RE
.PP

.PP
Definition at line 81 of file glbody\&.h\&.
.SS "bool GLBody::readBinaryModelFile (const QString & dataFileName, QVector< \fBGLPoint\fP > * pointContainer = \fCnullptr\fP, QVector< GLushort > * indexContainer = \fCnullptr\fP)\fC [virtual]\fP"

.PP
readBinaryFile File format: 4 bytes uint number of GlPoints, 4 bytes uint number of uint indices number of points GlPoint objects followed by number of indices indices 
.PP
\fBParameters:\fP
.RS 4
\fIdataFileName\fP 
.br
\fIpointContainer\fP To be used for GLPoints\&. If nullptr, a new private container is created 
.br
\fIindexContainer\fP To be used for indices\&. If nullptr, a new private container is created 
.RE
.PP
\fBReturns:\fP
.RS 4
.RE
.PP

.PP
Definition at line 148 of file glbody\&.cpp\&.
.SS "void GLBody::rotateModelPoints (const QVector3D & axisCenter, const QVector3D & axisDirection, float angle)\fC [virtual]\fP"

.PP
rotateModelPoints Rotates model points around axis 
.PP
\fBParameters:\fP
.RS 4
\fIaxisCenter\fP The center of the rotation axis 
.br
\fIaxisDirection\fP Direction of rotation axis 
.br
\fIangle\fP Clockwise rotation angle\&. 
.RE
.PP

.PP
Definition at line 206 of file glbody\&.cpp\&.
.SS "void GLBody::setActiveTextureIndex (int i)\fC [inline]\fP"

.PP
setTextureIndex 
.PP
\fBParameters:\fP
.RS 4
\fIi\fP set m_activeTexture to m_textureIds[i] 
.RE
.PP

.PP
Definition at line 254 of file glbody\&.h\&.
.SS "void GLBody::setCenter (const QVector3D & newVal)"
Set new center and invalidate surface\&. 
.PP
Definition at line 741 of file glbody\&.cpp\&.
.SS "void GLBody::setColor (const \fBGLColorRgba\fP & newVal)\fC [inline]\fP"
Simple setters 
.PP
Definition at line 239 of file glbody\&.h\&.
.SS "void GLBody::setDrawingMode (GLuint newVal)\fC [inline]\fP"

.PP
Definition at line 243 of file glbody\&.h\&.
.SS "void GLBody::setModelOffset (const QVector3D & offset)\fC [inline]\fP"

.PP
Definition at line 245 of file glbody\&.h\&.
.SS "void GLBody::setScale (float scale)\fC [inline]\fP"

.PP
Definition at line 262 of file glbody\&.h\&.
.SS "void GLBody::setSelected (bool newVal)\fC [inline]\fP"

.PP
Definition at line 242 of file glbody\&.h\&.
.SS "void GLBody::setShininess (int newVal)\fC [inline]\fP"

.PP
Definition at line 241 of file glbody\&.h\&.
.SS "void GLBody::setSpecularColor (const \fBGLColorRgba\fP & newVal)\fC [inline]\fP"

.PP
Definition at line 240 of file glbody\&.h\&.
.SS "bool GLBody::setTextureFile (const QString & textureFile)"
Set texture file\&. Needs a current OpenGL context\&.
.PP
Set texture file\&. 
.PP
Definition at line 416 of file glbody\&.cpp\&.
.SS "bool GLBody::setTextureFiles (const QStringList & textureFiles)"

.PP
setTextures Alle Texturen aus textureFiles laden\&. 
.PP
\fBParameters:\fP
.RS 4
\fIminfilter\fP 
.br
\fImagfilter\fP 
.br
\fIwrapmode\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
true wenn ok\&. 
.RE
.PP

.PP
Definition at line 429 of file glbody\&.cpp\&.
.SS "void GLBody::setTransformation (const QMatrix4x4 & transformation)\fC [inline]\fP"

.PP
Definition at line 244 of file glbody\&.h\&.
.SS "void GLBody::showFrame (bool show)\fC [inline]\fP"

.PP
Definition at line 265 of file glbody\&.h\&.
.SS "void GLBody::showNormals (bool show)\fC [inline]\fP"

.PP
Definition at line 266 of file glbody\&.h\&.
.SS "bool GLBody::spheresAreColliding (const \fBGLBody\fP * other)\fC [virtual]\fP"
Returns true, if enclosing spheres touch or intersect 
.PP
Definition at line 723 of file glbody\&.cpp\&.
.SS "void GLBody::startAnimation (float startValue = \fC0\&.0\fP)\fC [virtual]\fP"

.PP
startAnimation Start an animation process\&. Sets animationActive to true\&. Overwrite in subclasses to set Begin and End values for animated properties\&. 
.PP
\fBParameters:\fP
.RS 4
\fIstartValue\fP Present state of the animation process 
.RE
.PP

.PP
Definition at line 447 of file glbody\&.cpp\&.
.SS "void GLBody::updateAnimatedProperties (float animationState)\fC [virtual]\fP"

.PP
updateAnimatedProperties Overwrite to set current values of animated properties\&. 
.PP
Definition at line 477 of file glbody\&.cpp\&.
.SH "Member Data Documentation"
.PP 
.SS "int GLBody::m_activeTextureIndex\fC [protected]\fP"
The index of the texture to be used in function \fBdraw()\fP 
.PP
Definition at line 391 of file glbody\&.h\&.
.SS "bool GLBody::m_animateForwards\fC [protected]\fP"

.PP
m_animateForwards Animate to final state or back to start state 
.PP
Definition at line 337 of file glbody\&.h\&.
.SS "bool GLBody::m_animationActive\fC [protected]\fP"

.PP
m_animationActive Flag for a running animation 
.PP
Definition at line 328 of file glbody\&.h\&.
.SS "float GLBody::m_animationStart\fC [protected]\fP"

.PP
m_animationStart The value of the animation state when this function is called\&. e\&.g\&. 0\&.5 if the global animation process is already half finished\&. 
.PP
Definition at line 333 of file glbody\&.h\&.
.SS "QVector3D GLBody::m_center\fC [protected]\fP"
The center of the enclosing sphere 
.PP
Definition at line 304 of file glbody\&.h\&.
.SS "\fBGLColorRgba\fP GLBody::m_color\fC [protected]\fP"
The diffuse and ambient color for the body\&. 
.PP
Definition at line 399 of file glbody\&.h\&.
.SS "GLuint GLBody::m_drawingMode\fC [protected]\fP"
The mode to be passed to glDrawArrays or glDrawElements e\&.g\&. GL_TRIANGLES, GL_TRIANGLE_STRIP 
.PP
Definition at line 323 of file glbody\&.h\&.
.SS "QMatrix4x4 GLBody::m_drawMatrix\fC [protected]\fP"

.PP
m_drawMatrix This matrix is multiplied with the modelview matrix prior to rendering the body\&. 
.PP
Definition at line 429 of file glbody\&.h\&.
.SS "\fBIndexType\fP GLBody::m_firstFrameIndex\fC [protected]\fP"

.PP
Definition at line 447 of file glbody\&.h\&.
.SS "\fBIndexType\fP GLBody::m_firstFramePoint\fC [protected]\fP"

.PP
Definition at line 443 of file glbody\&.h\&.
.SS "\fBIndexType\fP GLBody::m_firstHitPoint\fC [protected]\fP"

.PP
Definition at line 449 of file glbody\&.h\&.
.SS "GLushort GLBody::m_firstIndex\fC [protected]\fP"

.PP
startIndex The first index for this body 
.PP
Definition at line 371 of file glbody\&.h\&.
.SS "\fBIndexType\fP GLBody::m_firstNormalIndex\fC [protected]\fP"

.PP
Definition at line 445 of file glbody\&.h\&.
.SS "\fBIndexType\fP GLBody::m_firstNormalPoint\fC [protected]\fP"

.PP
Definition at line 441 of file glbody\&.h\&.
.SS "GLushort GLBody::m_firstPoint\fC [protected]\fP"

.PP
firstPoint The firstPoint for this body 
.PP
Definition at line 352 of file glbody\&.h\&.
.SS "QVector<GLushort>* GLBody::m_indices\fC [protected]\fP"
The array with the indices\&. May be left empty\&. 
.PP
Definition at line 361 of file glbody\&.h\&.
.SS "QVector3D GLBody::m_maxCoordinate\fC [protected]\fP"

.PP
m_maxCoordinate The right top front corner of the enclosing cube 
.PP
Definition at line 313 of file glbody\&.h\&.
.SS "QVector3D GLBody::m_minCoordinate\fC [protected]\fP"

.PP
m_minCoordinate The left bottom back corner of the enclosing cube 
.PP
Definition at line 309 of file glbody\&.h\&.
.SS "QVector3D GLBody::m_modelOffset\fC [protected]\fP"

.PP
Definition at line 416 of file glbody\&.h\&.
.SS "QString GLBody::m_name\fC [protected]\fP"
The name of this object for debugging messages\&. 
.PP
Definition at line 300 of file glbody\&.h\&.
.SS "\fBIndexType\fP GLBody::m_nextFrameIndex\fC [protected]\fP"

.PP
Definition at line 448 of file glbody\&.h\&.
.SS "\fBIndexType\fP GLBody::m_nextFramePoint\fC [protected]\fP"

.PP
Definition at line 444 of file glbody\&.h\&.
.SS "\fBIndexType\fP GLBody::m_nextHitPoint\fC [protected]\fP"

.PP
Definition at line 450 of file glbody\&.h\&.
.SS "GLushort GLBody::m_nextIndex\fC [protected]\fP"

.PP
indexCount The next index for this body\&. (last index + 1) 
.PP
Definition at line 376 of file glbody\&.h\&.
.SS "\fBIndexType\fP GLBody::m_nextNormalIndex\fC [protected]\fP"

.PP
Definition at line 446 of file glbody\&.h\&.
.SS "\fBIndexType\fP GLBody::m_nextNormalPoint\fC [protected]\fP"

.PP
Definition at line 442 of file glbody\&.h\&.
.SS "GLushort GLBody::m_nextPoint\fC [protected]\fP"

.PP
lastPoint The next point for this body\&. ( last point +1) 
.PP
Definition at line 357 of file glbody\&.h\&.
.SS "bool GLBody::m_ownIndexContainer\fC [protected]\fP"

.PP
ownPointsContainer Set this Flag, if points container was created by this body\&. 
.PP
Definition at line 366 of file glbody\&.h\&.
.SS "bool GLBody::m_ownPointsContainer\fC [protected]\fP"

.PP
ownPointsContainer Set this Flag, if points container was created by this body\&. 
.PP
Definition at line 347 of file glbody\&.h\&.
.SS "QVector<\fBGLPoint\fP>* GLBody::m_points\fC [protected]\fP"
The array of points defining the surface\&. This \fImay be\fP a container not owned by this body\&. 
.PP
Definition at line 342 of file glbody\&.h\&.
.SS "GLfloat GLBody::m_radius\fC [protected]\fP"
The radius of the enclosing sphere 
.PP
Definition at line 318 of file glbody\&.h\&.
.SS "float GLBody::m_scale\fC [protected]\fP"

.PP
m_scale 
.PP
Definition at line 433 of file glbody\&.h\&.
.SS "bool GLBody::m_selected\fC [protected]\fP"
Flag for selected mode\&. 
.PP
Definition at line 414 of file glbody\&.h\&.
.SS "int GLBody::m_shininess\fC [protected]\fP"
Shininess for specular color 
.PP
Definition at line 409 of file glbody\&.h\&.
.SS "bool GLBody::m_showFrame\fC [protected]\fP"

.PP
Definition at line 452 of file glbody\&.h\&.
.SS "bool GLBody::m_showNormals\fC [protected]\fP"

.PP
Definition at line 451 of file glbody\&.h\&.
.SS "\fBGLColorRgba\fP GLBody::m_specularColor\fC [protected]\fP"
The specular color 
.PP
Definition at line 404 of file glbody\&.h\&.
.SS "bool GLBody::m_surfaceIsValid\fC [protected]\fP"
The flag for a valid surface\&. 
.PP
Definition at line 380 of file glbody\&.h\&.
.SS "QStringList GLBody::m_textureFilenames\fC [protected]\fP"
The tetxure files\&. 
.PP
Definition at line 394 of file glbody\&.h\&.
.SS "QVector<GLuint> GLBody::m_textureIds\fC [protected]\fP"
The textures to be used\&. 
.PP
Definition at line 387 of file glbody\&.h\&.
.SS "QVector<QOpenGLTexture *> GLBody::m_textures\fC [protected]\fP"

.PP
m_textures The textures to be used with this body 
.PP
Definition at line 384 of file glbody\&.h\&.
.SS "QMatrix4x4 GLBody::m_transformationMatrix\fC [protected]\fP"
This matrix holds the basic transformation for the body and should not be modified after first setting\&. 
.PP
Definition at line 422 of file glbody\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for 4Gewinnt from the source code\&.
