.TH "GLItem" 3 "Mon Feb 25 2019" "4Gewinnt" \" -*- nroff -*-
.ad l
.nh
.SH NAME
GLItem \- The GlItem class is a 3D-scene item designed for use in QML SceneGraphs\&. It should be subclassed according to your requirements, registered with qmlRegisterType and used as a component in QML files\&. The default constructor will use src/vshader\&.vsh and src/fshader\&.fsh as shaders\&. Fell free to use shaders of your own\&. Refer to the \fBGLESRenderer\fP class for shader requirements\&. Geometry data should be put into m_points and m_vertices containers for maximum performance\&. Use paintUnderQml or paintOnTopOfQml to paint a 3D scene under or on top of the QML elements of the QML SceneGraph\&. For debugging geometries, call toggleMove to let the scene rotate around m_rotationAxis\&. Warning: Updating geometry data must be carried out in synchronizeThreads, because drawing will be performed on the rendering thread\&. The rendering thread is waiting when synchronizeThreads is called\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <glitem\&.h>\fP
.PP
Inherits QQuickItem\&.
.PP
Inherited by \fBMyGlItem\fP\&.
.SS "Public Slots"

.in +1c
.ti -1c
.RI "void \fBpaintBefore\fP ()"
.br
.RI "paintBefore Activates renderer, clear color and depth buffers and calls paintUnderQmlScene\&. This function should not be overwritten "
.ti -1c
.RI "void \fBpaintAfter\fP ()"
.br
.RI "paintAfter Activates renderer, clear color and depth buffers and calls paintOnTopOfQmlScene\&. This function should not be overwritten "
.ti -1c
.RI "void \fBtoggleMove\fP ()"
.br
.RI "toggleMove Togles the movement flag "
.ti -1c
.RI "void \fBmousePressed\fP (int x, int y)"
.br
.ti -1c
.RI "void \fBmousePositionChanged\fP (int x, int y)"
.br
.ti -1c
.RI "void \fBmouseReleased\fP (int x, int y)"
.br
.ti -1c
.RI "void \fBsetVertexShaderFilename\fP (QString arg)"
.br
.ti -1c
.RI "void \fBsetFragmentShaderFilename\fP (QString arg)"
.br
.ti -1c
.RI "void \fBsetViewportX\fP (int arg)"
.br
.ti -1c
.RI "void \fBsetViewportY\fP (int arg)"
.br
.in -1c
.SS "Signals"

.in +1c
.ti -1c
.RI "void \fBvertexShaderFilenameChanged\fP (QString arg)"
.br
.ti -1c
.RI "void \fBfragmentShaderFilenameChanged\fP (QString arg)"
.br
.ti -1c
.RI "void \fBmovementActivatedChanged\fP ()"
.br
.ti -1c
.RI "void \fBviewportXChanged\fP (int arg)"
.br
.ti -1c
.RI "void \fBviewportYChanged\fP (int arg)"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBGLItem\fP (QQuickItem *parent=nullptr, const QString &\fBvertexShaderFilename\fP=':/shaders/vshader\&.vsh', const QString &\fBfragmentShaderFilename\fP=':/shaders/fshader\&.fsh')"
.br
.ti -1c
.RI "virtual \fB~GLItem\fP ()"
.br
.ti -1c
.RI "QSGNode * \fBupdatePaintNode\fP (QSGNode *node, UpdatePaintNodeData *)"
.br
.RI "updatePaintNode Overwrite this function, if you want to add items to the scenegraph\&. Do not call this function\&. It will be called automatically\&. "
.ti -1c
.RI "QString \fBfragmentShaderFilename\fP () const"
.br
.ti -1c
.RI "QString \fBvertexShaderFilename\fP () const"
.br
.ti -1c
.RI "bool \fBmovementActivated\fP ()"
.br
.ti -1c
.RI "void \fBsetEye\fP (const QVector3D &newVal)"
.br
.ti -1c
.RI "int \fBviewportX\fP () const"
.br
.ti -1c
.RI "int \fBviewportY\fP () const"
.br
.in -1c
.SS "Protected Slots"

.in +1c
.ti -1c
.RI "void \fBhandleWindowChanged\fP (QQuickWindow *win)"
.br
.RI "handleWindowChanged "
.ti -1c
.RI "void \fBonTimerTimeout\fP ()"
.br
.RI "onTimerTimeout Overwrite for moving the scene\&. "
.ti -1c
.RI "void \fBdeleteRenderer\fP ()"
.br
.RI "deleteRenderer Delete renderer unloads shader program and deletes renderer\&. "
.ti -1c
.RI "void \fBsynchronizeThreads\fP ()"
.br
.RI "synchronizeThreads Render thread is sleeping when this function is called\&. Copy geometry modifications from GuiThread owned variables here\&. "
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual void \fBdoSynchronizeThreads\fP ()"
.br
.RI "doSynchronizeThreads Copy data from GUI-thread to render-thread and vice versa\&. Virtual function to be overridden by subclasses "
.ti -1c
.RI "virtual void \fBdoTimerTimeout\fP ()"
.br
.ti -1c
.RI "virtual void \fBpaintUnderQmlScene\fP ()"
.br
.RI "paintUnderQmlScene Virtual function for painting under a QML scene\&. This function is called by paintBefore after calling createGeometries and initializing and binding the renderer\&. Overwrite in subclasses for painting geometries in m_points with the renderer\&. "
.ti -1c
.RI "virtual void \fBpaintOnTopOfQmlScene\fP ()"
.br
.RI "paintUnderQmlScene Virtual function for painting on top of a QML scene\&. This function is called by paintAfter after calling createGeometries and initializing and binding the renderer\&. Overwrite in subclasses for painting geometries in m_points with the renderer\&. "
.ti -1c
.RI "virtual void \fBdrawAxes\fP ()"
.br
.ti -1c
.RI "virtual void \fBcreateAxes\fP (float length)"
.br
.ti -1c
.RI "virtual void \fBsetupGeometry\fP ()"
.br
.RI "setupGeometry Put the geometric data into the points array and set m_geometryIsValid flag\&. MUST be overridden in subclasses\&. GlItem::setupGeometry() does nothing\&. "
.ti -1c
.RI "virtual void \fBsetupView\fP (bool clearBuffers)"
.br
.RI "setupView Setup matrices, lighting and basic GL rendering settings GlItem::setupView sets up a basic view with (0,0,0) in the center of the screen\&. You may override this function to fit your requirements\&. "
.ti -1c
.RI "virtual bool \fBsetupRenderer\fP ()"
.br
.RI "setupRenderer Setup matrices, lighting\&. Does not call glXXX functions "
.ti -1c
.RI "void \fBcreateAxis\fP (float length, const QVector3D &origin, const QVector3D &axis, const QVector3D &normal, const QVector3D &texCoord, const \fBGLColorRgba\fP &color)"
.br
.RI "createAxis creates a coordinate axis "
.ti -1c
.RI "QVector< \fBGLPoint\fP > * \fBpoints\fP ()"
.br
.ti -1c
.RI "QVector< \fBIndexType\fP > * \fBindices\fP ()"
.br
.ti -1c
.RI "\fBGLESRenderer\fP * \fBrenderer\fP ()"
.br
.ti -1c
.RI "virtual void \fBinitializeRenderer\fP ()"
.br
.RI "createShaderProgram creates and links the shader program using vshader\&. "
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "QVector< QVector3D > \fBm_vertices\fP"
.br
.ti -1c
.RI "QVector< QVector3D > \fBm_normals\fP"
.br
.ti -1c
.RI "QVector< QVector3D > \fBm_texCoords\fP"
.br
.ti -1c
.RI "QVector< QVector4D > \fBm_colors\fP"
.br
.ti -1c
.RI "bool \fBm_geometryIsValid\fP"
.br
.ti -1c
.RI "bool \fBm_colorArrayEnabled\fP"
.br
.ti -1c
.RI "bool \fBm_texturesEnabled\fP"
.br
.ti -1c
.RI "bool \fBm_lightingEnabled\fP"
.br
.ti -1c
.RI "bool \fBm_activatePaintBeforeQml\fP"
.br
.ti -1c
.RI "bool \fBm_activatePaintAfterQml\fP"
.br
.ti -1c
.RI "bool \fBm_orthoMode\fP"
.br
.ti -1c
.RI "float \fBm_orthoRange\fP"
.br
.ti -1c
.RI "bool \fBm_drawAxes\fP"
.br
.ti -1c
.RI "QVector3D \fBm_lightDirection\fP"
.br
.ti -1c
.RI "GLfloat \fBm_ambientLightBrightness\fP"
.br
.ti -1c
.RI "\fBGLColorRgba\fP \fBm_backgroundColor\fP"
.br
.ti -1c
.RI "QVector3D \fBm_eye\fP"
.br
.ti -1c
.RI "QVector3D \fBm_center\fP"
.br
.ti -1c
.RI "QVector3D \fBm_up\fP"
.br
.ti -1c
.RI "float \fBm_fovy\fP"
.br
.ti -1c
.RI "float \fBm_aspect\fP"
.br
.ti -1c
.RI "float \fBm_near\fP"
.br
.ti -1c
.RI "float \fBm_far\fP"
.br
.ti -1c
.RI "int \fBm_viewportX\fP"
.br
.ti -1c
.RI "int \fBm_viewportY\fP"
.br
.ti -1c
.RI "int \fBm_viewportW\fP"
.br
.ti -1c
.RI "int \fBm_viewportH\fP"
.br
.ti -1c
.RI "QTimer * \fBm_timer\fP"
.br
.ti -1c
.RI "float \fBm_guiThreadRotation\fP"
.br
.ti -1c
.RI "float \fBm_renderThreadRotation\fP"
.br
.ti -1c
.RI "QString \fBm_vertexShaderFilename\fP"
.br
.ti -1c
.RI "QString \fBm_fragmentShaderFilename\fP"
.br
.ti -1c
.RI "QMatrix4x4 \fBm_cameraTransform\fP"
.br
.ti -1c
.RI "QVector< \fBGLPoint\fP > \fBm_points\fP"
.br
.ti -1c
.RI "QVector< \fBIndexType\fP > \fBm_indices\fP"
.br
.ti -1c
.RI "\fBGLESRenderer\fP * \fBm_renderer\fP"
.br
.ti -1c
.RI "int \fBm_firstAxesPoint\fP"
.br
.ti -1c
.RI "int \fBm_lastAxesPoint\fP"
.br
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "QString \fBvertexShaderFilename\fP"
.br
.ti -1c
.RI "QString \fBfragmentShaderFilename\fP"
.br
.ti -1c
.RI "bool \fBmovementActivated\fP"
.br
.ti -1c
.RI "int \fBviewportX\fP"
.br
.ti -1c
.RI "int \fBviewportY\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
The GlItem class is a 3D-scene item designed for use in QML SceneGraphs\&. It should be subclassed according to your requirements, registered with qmlRegisterType and used as a component in QML files\&. The default constructor will use src/vshader\&.vsh and src/fshader\&.fsh as shaders\&. Fell free to use shaders of your own\&. Refer to the \fBGLESRenderer\fP class for shader requirements\&. Geometry data should be put into m_points and m_vertices containers for maximum performance\&. Use paintUnderQml or paintOnTopOfQml to paint a 3D scene under or on top of the QML elements of the QML SceneGraph\&. For debugging geometries, call toggleMove to let the scene rotate around m_rotationAxis\&. Warning: Updating geometry data must be carried out in synchronizeThreads, because drawing will be performed on the rendering thread\&. The rendering thread is waiting when synchronizeThreads is called\&. 


.PP
Definition at line 27 of file glitem\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "GLItem::GLItem (QQuickItem * parent = \fCnullptr\fP, const QString & vertexShaderFilename = \fC':/shaders/vshader\&.vsh'\fP, const QString & fragmentShaderFilename = \fC':/shaders/fshader\&.fsh'\fP)\fC [explicit]\fP"

.PP
Definition at line 23 of file glitem\&.cpp\&.
.SS "GLItem::~GLItem ()\fC [virtual]\fP"

.PP
Definition at line 73 of file glitem\&.cpp\&.
.SH "Member Function Documentation"
.PP 
.SS "void GLItem::createAxes (float length)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 395 of file glitem\&.cpp\&.
.SS "void GLItem::createAxis (float length, const QVector3D & origin, const QVector3D & axis, const QVector3D & normal, const QVector3D & texCoord, const \fBGLColorRgba\fP & color)\fC [protected]\fP"

.PP
createAxis creates a coordinate axis 
.PP
\fBParameters:\fP
.RS 4
\fIlength\fP Total length of axis, starting from origin 
.br
\fIorigin\fP Start coordinate of axis 
.br
\fIaxis\fP Direction of axis 
.br
\fInormal\fP Direction of ticks and dummy normal\&. 
.br
\fItexCoord\fP Dummy texture coordinate 
.br
\fIcolor\fP Color of axis 
.RE
.PP

.PP
Definition at line 369 of file glitem\&.cpp\&.
.SS "void GLItem::deleteRenderer ()\fC [protected]\fP, \fC [slot]\fP"

.PP
deleteRenderer Delete renderer unloads shader program and deletes renderer\&. 
.PP
Definition at line 158 of file glitem\&.cpp\&.
.SS "void GLItem::doSynchronizeThreads ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
doSynchronizeThreads Copy data from GUI-thread to render-thread and vice versa\&. Virtual function to be overridden by subclasses 
.PP
Definition at line 168 of file glitem\&.cpp\&.
.SS "void GLItem::doTimerTimeout ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 320 of file glitem\&.cpp\&.
.SS "void GLItem::drawAxes ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Definition at line 342 of file glitem\&.cpp\&.
.SS "QString GLItem::fragmentShaderFilename () const\fC [inline]\fP"

.PP
Definition at line 63 of file glitem\&.h\&.
.SS "void GLItem::fragmentShaderFilenameChanged (QString arg)\fC [signal]\fP"

.SS "void GLItem::handleWindowChanged (QQuickWindow * win)\fC [protected]\fP, \fC [slot]\fP"

.PP
handleWindowChanged GlItem::handleWindowChanged\&.
.PP
\fBParameters:\fP
.RS 4
\fIwin\fP This function is called when the parent Window changes\&. This is also the case, when a parent window is set for the first time\&.
.RE
.PP
Connect to the window's signals\&. This can not be done in the constructor, because at that time there is no valid window yet\&. 
.PP
\fBParameters:\fP
.RS 4
\fIwin\fP The window in which this QQuickItem will be painted\&. 
.RE
.PP

.PP
Definition at line 288 of file glitem\&.cpp\&.
.SS "QVector<\fBIndexType\fP>* GLItem::indices ()\fC [inline]\fP, \fC [protected]\fP"

.PP
Definition at line 221 of file glitem\&.h\&.
.SS "void GLItem::initializeRenderer ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
createShaderProgram creates and links the shader program using vshader\&. 
.PP
Definition at line 146 of file glitem\&.cpp\&.
.SS "void GLItem::mousePositionChanged (int x, int y)\fC [slot]\fP"

.PP
Definition at line 193 of file glitem\&.cpp\&.
.SS "void GLItem::mousePressed (int x, int y)\fC [slot]\fP"
Mouse event handler to be called from QML 
.PP
Definition at line 188 of file glitem\&.cpp\&.
.SS "void GLItem::mouseReleased (int x, int y)\fC [slot]\fP"

.PP
Definition at line 198 of file glitem\&.cpp\&.
.SS "bool GLItem::movementActivated ()"

.SS "void GLItem::movementActivatedChanged ()\fC [signal]\fP"

.SS "void GLItem::onTimerTimeout ()\fC [protected]\fP, \fC [slot]\fP"

.PP
onTimerTimeout Overwrite for moving the scene\&. 
.PP
Definition at line 312 of file glitem\&.cpp\&.
.SS "void GLItem::paintAfter ()\fC [slot]\fP"

.PP
paintAfter Activates renderer, clear color and depth buffers and calls paintOnTopOfQmlScene\&. This function should not be overwritten 
.PP
Definition at line 126 of file glitem\&.cpp\&.
.SS "void GLItem::paintBefore ()\fC [slot]\fP"

.PP
paintBefore Activates renderer, clear color and depth buffers and calls paintUnderQmlScene\&. This function should not be overwritten 
.PP
Definition at line 110 of file glitem\&.cpp\&.
.SS "void GLItem::paintOnTopOfQmlScene ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
paintUnderQmlScene Virtual function for painting on top of a QML scene\&. This function is called by paintAfter after calling createGeometries and initializing and binding the renderer\&. Overwrite in subclasses for painting geometries in m_points with the renderer\&. 
.PP
Reimplemented in \fBMyGlItem\fP\&.
.PP
Definition at line 337 of file glitem\&.cpp\&.
.SS "void GLItem::paintUnderQmlScene ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
paintUnderQmlScene Virtual function for painting under a QML scene\&. This function is called by paintBefore after calling createGeometries and initializing and binding the renderer\&. Overwrite in subclasses for painting geometries in m_points with the renderer\&. 
.PP
Reimplemented in \fBMyGlItem\fP\&.
.PP
Definition at line 332 of file glitem\&.cpp\&.
.SS "QVector<\fBGLPoint\fP>* GLItem::points ()\fC [inline]\fP, \fC [protected]\fP"

.PP
Definition at line 220 of file glitem\&.h\&.
.SS "\fBGLESRenderer\fP* GLItem::renderer ()\fC [inline]\fP, \fC [protected]\fP"

.PP
Definition at line 222 of file glitem\&.h\&.
.SS "void GLItem::setEye (const QVector3D & newVal)\fC [inline]\fP"

.PP
Definition at line 68 of file glitem\&.h\&.
.SS "void GLItem::setFragmentShaderFilename (QString arg)\fC [inline]\fP, \fC [slot]\fP"

.PP
Definition at line 128 of file glitem\&.h\&.
.SS "void GLItem::setupGeometry ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
setupGeometry Put the geometric data into the points array and set m_geometryIsValid flag\&. MUST be overridden in subclasses\&. GlItem::setupGeometry() does nothing\&. 
.PP
Reimplemented in \fBMyGlItem\fP\&.
.PP
Definition at line 324 of file glitem\&.cpp\&.
.SS "bool GLItem::setupRenderer ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
setupRenderer Setup matrices, lighting\&. Does not call glXXX functions 
.PP
Definition at line 248 of file glitem\&.cpp\&.
.SS "void GLItem::setupView (bool clearBuffers)\fC [protected]\fP, \fC [virtual]\fP"

.PP
setupView Setup matrices, lighting and basic GL rendering settings GlItem::setupView sets up a basic view with (0,0,0) in the center of the screen\&. You may override this function to fit your requirements\&. 
.PP
Definition at line 220 of file glitem\&.cpp\&.
.SS "void GLItem::setVertexShaderFilename (QString arg)\fC [inline]\fP, \fC [slot]\fP"

.PP
Definition at line 121 of file glitem\&.h\&.
.SS "void GLItem::setViewportX (int arg)\fC [slot]\fP"

.PP
Definition at line 203 of file glitem\&.cpp\&.
.SS "void GLItem::setViewportY (int arg)\fC [slot]\fP"

.PP
Definition at line 212 of file glitem\&.cpp\&.
.SS "void GLItem::synchronizeThreads ()\fC [protected]\fP, \fC [slot]\fP"

.PP
synchronizeThreads Render thread is sleeping when this function is called\&. Copy geometry modifications from GuiThread owned variables here\&. 
.PP
Definition at line 173 of file glitem\&.cpp\&.
.SS "void GLItem::toggleMove ()\fC [slot]\fP"

.PP
toggleMove Togles the movement flag 
.PP
Definition at line 179 of file glitem\&.cpp\&.
.SS "QSGNode * GLItem::updatePaintNode (QSGNode * node, UpdatePaintNodeData *)"

.PP
updatePaintNode Overwrite this function, if you want to add items to the scenegraph\&. Do not call this function\&. It will be called automatically\&. GlItem::updatePaintNode\&.
.PP
\fBParameters:\fP
.RS 4
\fInode\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
.RE
.PP
\fBParameters:\fP
.RS 4
\fInode\fP Returns the root of the subtree to be rendered ON TOP of scene rendered in paint()\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
.RE
.PP

.PP
Definition at line 85 of file glitem\&.cpp\&.
.SS "QString GLItem::vertexShaderFilename () const\fC [inline]\fP"

.PP
Definition at line 64 of file glitem\&.h\&.
.SS "void GLItem::vertexShaderFilenameChanged (QString arg)\fC [signal]\fP"

.SS "int GLItem::viewportX () const\fC [inline]\fP"

.PP
Definition at line 73 of file glitem\&.h\&.
.SS "void GLItem::viewportXChanged (int arg)\fC [signal]\fP"

.SS "int GLItem::viewportY () const\fC [inline]\fP"

.PP
Definition at line 78 of file glitem\&.h\&.
.SS "void GLItem::viewportYChanged (int arg)\fC [signal]\fP"

.SH "Member Data Documentation"
.PP 
.SS "bool GLItem::m_activatePaintAfterQml\fC [protected]\fP"

.PP
Definition at line 235 of file glitem\&.h\&.
.SS "bool GLItem::m_activatePaintBeforeQml\fC [protected]\fP"

.PP
Definition at line 234 of file glitem\&.h\&.
.SS "GLfloat GLItem::m_ambientLightBrightness\fC [protected]\fP"

.PP
Definition at line 242 of file glitem\&.h\&.
.SS "float GLItem::m_aspect\fC [protected]\fP"

.PP
Definition at line 252 of file glitem\&.h\&.
.SS "\fBGLColorRgba\fP GLItem::m_backgroundColor\fC [protected]\fP"

.PP
Definition at line 243 of file glitem\&.h\&.
.SS "QMatrix4x4 GLItem::m_cameraTransform\fC [protected]\fP"

.PP
Definition at line 272 of file glitem\&.h\&.
.SS "QVector3D GLItem::m_center\fC [protected]\fP"

.PP
Definition at line 247 of file glitem\&.h\&.
.SS "bool GLItem::m_colorArrayEnabled\fC [protected]\fP"

.PP
Definition at line 231 of file glitem\&.h\&.
.SS "QVector<QVector4D> GLItem::m_colors\fC [protected]\fP"

.PP
Definition at line 228 of file glitem\&.h\&.
.SS "bool GLItem::m_drawAxes\fC [protected]\fP"

.PP
Definition at line 238 of file glitem\&.h\&.
.SS "QVector3D GLItem::m_eye\fC [protected]\fP"

.PP
Definition at line 246 of file glitem\&.h\&.
.SS "float GLItem::m_far\fC [protected]\fP"

.PP
Definition at line 254 of file glitem\&.h\&.
.SS "int GLItem::m_firstAxesPoint\fC [protected]\fP"

.PP
Definition at line 284 of file glitem\&.h\&.
.SS "float GLItem::m_fovy\fC [protected]\fP"

.PP
Definition at line 251 of file glitem\&.h\&.
.SS "QString GLItem::m_fragmentShaderFilename\fC [protected]\fP"

.PP
Definition at line 269 of file glitem\&.h\&.
.SS "bool GLItem::m_geometryIsValid\fC [protected]\fP"

.PP
Definition at line 230 of file glitem\&.h\&.
.SS "float GLItem::m_guiThreadRotation\fC [protected]\fP"

.PP
Definition at line 264 of file glitem\&.h\&.
.SS "QVector<\fBIndexType\fP> GLItem::m_indices\fC [protected]\fP"

.PP
Definition at line 281 of file glitem\&.h\&.
.SS "int GLItem::m_lastAxesPoint\fC [protected]\fP"

.PP
Definition at line 285 of file glitem\&.h\&.
.SS "QVector3D GLItem::m_lightDirection\fC [protected]\fP"

.PP
Definition at line 241 of file glitem\&.h\&.
.SS "bool GLItem::m_lightingEnabled\fC [protected]\fP"

.PP
Definition at line 233 of file glitem\&.h\&.
.SS "float GLItem::m_near\fC [protected]\fP"

.PP
Definition at line 253 of file glitem\&.h\&.
.SS "QVector<QVector3D> GLItem::m_normals\fC [protected]\fP"

.PP
Definition at line 226 of file glitem\&.h\&.
.SS "bool GLItem::m_orthoMode\fC [protected]\fP"

.PP
Definition at line 236 of file glitem\&.h\&.
.SS "float GLItem::m_orthoRange\fC [protected]\fP"

.PP
Definition at line 237 of file glitem\&.h\&.
.SS "QVector<\fBGLPoint\fP> GLItem::m_points\fC [protected]\fP"

.PP
Definition at line 280 of file glitem\&.h\&.
.SS "\fBGLESRenderer\fP* GLItem::m_renderer\fC [protected]\fP"

.PP
Definition at line 283 of file glitem\&.h\&.
.SS "float GLItem::m_renderThreadRotation\fC [protected]\fP"

.PP
Definition at line 265 of file glitem\&.h\&.
.SS "QVector<QVector3D> GLItem::m_texCoords\fC [protected]\fP"

.PP
Definition at line 227 of file glitem\&.h\&.
.SS "bool GLItem::m_texturesEnabled\fC [protected]\fP"

.PP
Definition at line 232 of file glitem\&.h\&.
.SS "QTimer* GLItem::m_timer\fC [protected]\fP"

.PP
Definition at line 263 of file glitem\&.h\&.
.SS "QVector3D GLItem::m_up\fC [protected]\fP"

.PP
Definition at line 248 of file glitem\&.h\&.
.SS "QString GLItem::m_vertexShaderFilename\fC [protected]\fP"

.PP
Definition at line 268 of file glitem\&.h\&.
.SS "QVector<QVector3D> GLItem::m_vertices\fC [protected]\fP"

.PP
Definition at line 225 of file glitem\&.h\&.
.SS "int GLItem::m_viewportH\fC [protected]\fP"

.PP
Definition at line 260 of file glitem\&.h\&.
.SS "int GLItem::m_viewportW\fC [protected]\fP"

.PP
Definition at line 259 of file glitem\&.h\&.
.SS "int GLItem::m_viewportX\fC [protected]\fP"

.PP
Definition at line 257 of file glitem\&.h\&.
.SS "int GLItem::m_viewportY\fC [protected]\fP"

.PP
Definition at line 258 of file glitem\&.h\&.
.SH "Property Documentation"
.PP 
.SS "QString GLItem::fragmentShaderFilename\fC [read]\fP, \fC [write]\fP"

.PP
Definition at line 35 of file glitem\&.h\&.
.SS "bool GLItem::movementActivated\fC [read]\fP"

.PP
Definition at line 36 of file glitem\&.h\&.
.SS "QString GLItem::vertexShaderFilename\fC [read]\fP, \fC [write]\fP"

.PP
Definition at line 34 of file glitem\&.h\&.
.SS "int GLItem::viewportX\fC [read]\fP, \fC [write]\fP"

.PP
Definition at line 37 of file glitem\&.h\&.
.SS "int GLItem::viewportY\fC [read]\fP, \fC [write]\fP"

.PP
Definition at line 38 of file glitem\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for 4Gewinnt from the source code\&.
