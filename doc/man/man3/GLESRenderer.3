.TH "GLESRenderer" 3 "Mon Feb 25 2019" "4Gewinnt" \" -*- nroff -*-
.ad l
.nh
.SH NAME
GLESRenderer \- A render program that can be used as a simple replacement for the OpenGL fixed function pipeline\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <glesrenderer\&.h>\fP
.PP
Inherits QObject\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBAttributeLocation\fP { \fBINVALID_LOCATION\fP, \fBVERTEX_LOCATION\fP, \fBNORMAL_LOCATION\fP, \fBCOLOR_LOCATION\fP, \fBTEXCOORD_LOCATION\fP }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBGLESRenderer\fP (QObject *parent, const QString &vShaderFilename=':/src/vshader\&.vsh', const QString &fShaderFilename=':/src/fshader\&.fsh')"
.br
.ti -1c
.RI "virtual \fB~GLESRenderer\fP ()"
.br
.RI "\fBGLESRenderer::~GLESRenderer\fP We need to delete the shaders here\&. They can not be added to the child list, because they live in render thread\&. "
.in -1c
.PP
.RI "\fBInitialization, binding and releasing\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "virtual bool \fBinitialize\fP ()"
.br
.ti -1c
.RI "virtual bool \fBbind\fP ()"
.br
.ti -1c
.RI "void \fBrelease\fP ()"
.br
.in -1c
.in -1c
.PP
.RI "\fBUnproject, project and mouse interaction functions\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "QVector3D \fBunProjectViewportPoint\fP (const QVector3D &vWin)"
.br
.ti -1c
.RI "QVector3D \fBviewportToClip\fP (const QVector3D &v)"
.br
.ti -1c
.RI "void \fBcalculateMousePoints\fP (QVector3D *nearPoint, QVector3D *farPoint, const QPoint &mousePos)"
.br
.ti -1c
.RI "float \fBdistanceToMouseClick\fP (QVector3D p, const QPoint &mousePos)"
.br
.ti -1c
.RI "bool \fBmouseIntersection\fP (QVector3D *intersection, QVector3D normal, float d, const QPoint &mousePos)"
.br
.in -1c
.in -1c
.PP
.RI "\fB\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "void \fBsetMvMatrix\fP (const QMatrix4x4 newVal)"
.br
.ti -1c
.RI "const QMatrix4x4 & \fBgetMvMatrix\fP ()"
.br
.ti -1c
.RI "const QMatrix3x3 & \fBgetNormalMatrix\fP ()"
.br
.ti -1c
.RI "void \fBsetLookAt\fP (const QVector3D &eye, const QVector3D &center, const QVector3D &up)"
.br
.ti -1c
.RI "void \fBsetPMatrix\fP (const QMatrix4x4 newVal)"
.br
.ti -1c
.RI "const QMatrix4x4 & \fBgetPMatrix\fP ()"
.br
.ti -1c
.RI "void \fBsetPerspective\fP (GLfloat fovy, GLfloat aspect, GLfloat nearClip, GLfloat farClip)"
.br
.ti -1c
.RI "void \fBsetOrtho\fP (float left, float right, float bottom, float top, float nearPlane, float farPlane)"
.br
.RI "setOrtho Set pMatrix to an orthogonal projection\&. "
.ti -1c
.RI "void \fBsetViewport\fP (int x, int y, int w, int h)"
.br
.ti -1c
.RI "void \fBreadGLViewportSettings\fP ()"
.br
.ti -1c
.RI "void \fBsetAmbientAndDiffuseColor\fP (const \fBGLColorRgba\fP newVal)"
.br
.ti -1c
.RI "void \fBsetAmbientLightBrightness\fP (float newVal)"
.br
.ti -1c
.RI "void \fBsetSpecularColor\fP (const \fBGLColorRgba\fP newVal)"
.br
.ti -1c
.RI "void \fBsetShininess\fP (float newVal)"
.br
.ti -1c
.RI "void \fBsetLightingEnabled\fP (bool newVal)"
.br
.ti -1c
.RI "bool \fBisLightingEnabled\fP ()"
.br
.ti -1c
.RI "void \fBsetColorArrayEnabled\fP (bool newVal)"
.br
.ti -1c
.RI "bool \fBisColorArrayEnabled\fP ()"
.br
.ti -1c
.RI "void \fBsetTextureEnabled\fP (bool newVal)"
.br
.ti -1c
.RI "bool \fBisTextureEnabled\fP ()"
.br
.ti -1c
.RI "void \fBsetMaskActive\fP (bool newVal)"
.br
.RI "setMaskActive Set the fragment shader mask flag "
.ti -1c
.RI "bool \fBisMaskActive\fP ()"
.br
.RI "isMaskActive "
.ti -1c
.RI "void \fBsetLightDirection\fP (const QVector3D &newVal)"
.br
.ti -1c
.RI "const QVector3D \fBlightDirection\fP ()"
.br
.ti -1c
.RI "void \fBsetPointSize\fP (float newVal)"
.br
.ti -1c
.RI "void \fBsetMaskCenter\fP (const QPoint &newVal)"
.br
.RI "setMaskCenter Set center of fragment shader mask "
.ti -1c
.RI "void \fBsetMaskDiameter\fP (float newVal)"
.br
.RI "setMaskDiameter Set diameter of fragment shader mask "
.ti -1c
.RI "float \fBpointSize\fP ()"
.br
.ti -1c
.RI "void \fBpushMvMatrix\fP ()"
.br
.ti -1c
.RI "void \fBpopMvMatrix\fP ()"
.br
.ti -1c
.RI "void \fBtranslate\fP (const QVector3D &v)"
.br
.ti -1c
.RI "void \fBtranslate\fP (float x, float y, float z)"
.br
.ti -1c
.RI "void \fBrotate\fP (GLfloat angle, const QVector3D &axis)"
.br
.ti -1c
.RI "void \fBrotate\fP (float angle, float x, float y, float z)"
.br
.ti -1c
.RI "void \fBzoom\fP (float zoomFactor)"
.br
.ti -1c
.RI "void \fBtransform\fP (const QMatrix4x4 &transformation)"
.br
.RI "transform Multiplies mvMatrix with transformation "
.ti -1c
.RI "void \fBaddTransformation\fP (const QMatrix4x4 additionalTransformation)"
.br
.RI "addTransformation Multiplies additionalTransformation to mvMatrix\&. "
.ti -1c
.RI "void \fBscale\fP (const QVector3D &v)"
.br
.in -1c
.in -1c
.PP
.RI "\fBAttribute setters\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "bool \fBactivateAttributeArray\fP (\fBAttributeLocation\fP location, const QVector2D *values, int stride=0)"
.br
.ti -1c
.RI "bool \fBactivateAttributeArray\fP (\fBAttributeLocation\fP location, const QVector3D *values, int stride=0)"
.br
.ti -1c
.RI "bool \fBactivateAttributeArray\fP (\fBAttributeLocation\fP location, const \fBGLColorRgba\fP *values, int stride=0)"
.br
.ti -1c
.RI "void \fBactivateAttributeBuffer\fP (\fBAttributeLocation\fP location)"
.br
.ti -1c
.RI "virtual void \fBdisableAttributeArrays\fP ()"
.br
.in -1c
.in -1c
.PP
.RI "\fBDebugging\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "QVector3D \fBmodelToClip\fP (const QVector3D &v)"
.br
.ti -1c
.RI "QVector3D \fBclipToViewport\fP (const QVector3D &v)"
.br
.in -1c
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "bool \fBactivateAttributeArray\fP (\fBAttributeLocation\fP location, const float *values, int tupleSize, int stride=0)"
.br
.RI "activateAttributeArray Enables Vertex, normal, color or texCoord arrays and sets start adresses of arrays location may be: VERTEX_LOCATION, NORMAL_LOCATION, COLOR_LOCATION, TEXCOORD_LOCATION "
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "bool \fBm_initialized\fP"
.br
.ti -1c
.RI "bool \fBm_bound\fP"
.br
.ti -1c
.RI "bool \fBm_lightingEnabled\fP"
.br
.ti -1c
.RI "bool \fBm_colorArrayEnabled\fP"
.br
.ti -1c
.RI "bool \fBm_textureEnabled\fP"
.br
.ti -1c
.RI "bool \fBm_invertedMvpMatrixValid\fP"
.br
.ti -1c
.RI "bool \fBm_maskActive\fP"
.br
.ti -1c
.RI "QMatrix4x4 \fBm_mvpMatrix\fP"
.br
.ti -1c
.RI "QMatrix4x4 \fBm_invertedMvpMatrix\fP"
.br
.ti -1c
.RI "QStack< QMatrix4x4 > \fBm_mvMatrixStack\fP"
.br
.ti -1c
.RI "QMatrix4x4 \fBm_mvMatrix\fP"
.br
.ti -1c
.RI "QMatrix4x4 \fBm_pMatrix\fP"
.br
.ti -1c
.RI "float \fBm_fovy\fP"
.br
.ti -1c
.RI "float \fBm_aspect\fP"
.br
.ti -1c
.RI "float \fBm_nearClip\fP"
.br
.ti -1c
.RI "float \fBm_farClip\fP"
.br
.ti -1c
.RI "bool \fBm_OrthoMode\fP"
.br
.ti -1c
.RI "QMatrix3x3 \fBm_normalMatrix\fP"
.br
.ti -1c
.RI "QVector3D \fBm_lightDirection\fP"
.br
.ti -1c
.RI "QVector3D \fBm_halfPlaneVector\fP"
.br
.ti -1c
.RI "\fBGLColorRgba\fP \fBm_ambientAndDiffuseColor\fP"
.br
.ti -1c
.RI "float \fBm_ambientLightBrightness\fP"
.br
.ti -1c
.RI "\fBGLColorRgba\fP \fBm_specularColor\fP"
.br
.ti -1c
.RI "float \fBm_shininess\fP"
.br
.ti -1c
.RI "float \fBm_pointSize\fP"
.br
.ti -1c
.RI "float \fBm_maskDiameter\fP"
.br
.ti -1c
.RI "QPoint \fBm_maskCenter\fP"
.br
.ti -1c
.RI "QString \fBm_vShaderFileName\fP"
.br
.ti -1c
.RI "QString \fBm_fShaderFileName\fP"
.br
.ti -1c
.RI "QOpenGLShader * \fBm_vShader\fP"
.br
.ti -1c
.RI "QOpenGLShader * \fBm_fShader\fP"
.br
.ti -1c
.RI "QOpenGLShaderProgram * \fBm_renderProgram\fP"
.br
.ti -1c
.RI "int \fBm_location_aVertex\fP"
.br
.ti -1c
.RI "int \fBm_location_aColor\fP"
.br
.ti -1c
.RI "int \fBm_location_aNormal\fP"
.br
.ti -1c
.RI "int \fBm_location_aTexCoord\fP"
.br
.ti -1c
.RI "int \fBm_location_uColorArrayEnabled\fP"
.br
.ti -1c
.RI "int \fBm_location_uLightingEnabled\fP"
.br
.ti -1c
.RI "int \fBm_location_uNormalMatrix\fP"
.br
.ti -1c
.RI "int \fBm_location_uMvpMatrix\fP"
.br
.ti -1c
.RI "int \fBm_location_uAmbientAndDiffuseColor\fP"
.br
.ti -1c
.RI "int \fBm_location_uAmbientLightBrightness\fP"
.br
.ti -1c
.RI "int \fBm_location_uSpecularColor\fP"
.br
.ti -1c
.RI "int \fBm_location_uShininess\fP"
.br
.ti -1c
.RI "int \fBm_location_uLightDirection\fP"
.br
.ti -1c
.RI "int \fBm_location_uHalfPlaneVector\fP"
.br
.ti -1c
.RI "int \fBm_location_uPointSize\fP"
.br
.ti -1c
.RI "int \fBm_location_uTextureSampler\fP"
.br
.ti -1c
.RI "int \fBm_location_uTextureEnabled\fP"
.br
.ti -1c
.RI "int \fBm_location_uMaskDiameter\fP"
.br
.ti -1c
.RI "int \fBm_location_uMaskCenter\fP"
.br
.ti -1c
.RI "int \fBm_location_uMaskActive\fP"
.br
.ti -1c
.RI "QList< int > \fBm_activeAttributeLocations\fP"
.br
.ti -1c
.RI "int \fBm_viewportX\fP"
.br
.ti -1c
.RI "int \fBm_viewportY\fP"
.br
.ti -1c
.RI "int \fBm_viewportW\fP"
.br
.ti -1c
.RI "int \fBm_viewportH\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
A render program that can be used as a simple replacement for the OpenGL fixed function pipeline\&. 


.PP
\fBAuthor:\fP
.RS 4
Walter Roth, 2014
.RE
.PP
\fBGLESRenderer\fP supports vertex, colors, normals, texCoords, textures and matrix manipulation\&. It owns a modelview and a projection matrix which can be used like in the old days of OpenGL 1\&. The vertex shader program needs to stick to the following variable names: attribute highp vec4 a_Vertex; attribute highp vec4 a_Color; attribute highp vec3 a_Normal; attribute highp vec2 a_TexCoord;
.PP
uniform bool u_ColorArrayEnabled uniform bool u_LightingEnabled; uniform highp mat4 u_MvpMatrix; uniform highp mat3 u_NormalMatrix; uniform highp vec3 u_LightDirection; uniform highp vec4 u_AmbientAndDiffuseColor; uniform highp vec4 u_SpecularColor; uniform highp float u_Shininess; uniform mediump float int u_PointSize;
.PP
The fragment shader texture variable must have the following name: uniform sampler2d s_Texture;
.PP
These names are used to determine the locations of the varables in the shaders\&. If you need more variables, subclass \fBGLESRenderer\fP and add new variable(s) to location_XXX variables\&. Extend virtual intialize(), \fBbind()\fP and \fBdisableAttributeArrays()\fP functions to support the new variable(s)\&.
.PP
The shader source should be in a separate file (e\&.g\&. added to the resources)\&. Example shaders vshader1 and fshader1 emulate a simple fixed-function lighted OpenGL 1 scene\&.
.PP
Call initialize, after a valid OpenGL context has been made current\&. Setup viewing with setViewport, setLookAt and setPerspective\&. Viewport coordinates must be given as GL-viewport coordinates, where lower left is (0,0)\&. Call bind to bind the program and set the uniform values you need\&. After this, call activateAttributeLocation to enable the attribute arrays\&. To change attribute arrays, call disableAttributeArrays and then again activateAttributeLocations\&. Finally call release\&.
.PP
\fBGLESRenderer\fP contains functions for projecting points from modelspace to screen and unprojecting points from screen to model space\&. These functions use the current matrix settings\&. Therefore, you have to (re)set the matrices to the values that are used to paint the model, before you call the project and unproject functions\&.
.PP
For convenient mouse interaction, \fBGLESRenderer\fP supplies the \fBcalculateMousePoints()\fP, \fBdistanceToMouseClick()\fP and \fBmouseIntersection()\fP functions\&. These functions use the unproject functions and therefore do also need valid model painting matrix settings\&. 
.PP
Definition at line 81 of file glesrenderer\&.h\&.
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBGLESRenderer::AttributeLocation\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIINVALID_LOCATION \fP\fP
.TP
\fB\fIVERTEX_LOCATION \fP\fP
.TP
\fB\fINORMAL_LOCATION \fP\fP
.TP
\fB\fICOLOR_LOCATION \fP\fP
.TP
\fB\fITEXCOORD_LOCATION \fP\fP
.PP
Definition at line 88 of file glesrenderer\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "GLESRenderer::GLESRenderer (QObject * parent, const QString & vShaderFilename = \fC':/src/vshader\&.vsh'\fP, const QString & fShaderFilename = \fC':/src/fshader\&.fsh'\fP)\fC [explicit]\fP"

.PP
Definition at line 37 of file glesrenderer\&.cpp\&.
.SS "GLESRenderer::~GLESRenderer ()\fC [virtual]\fP"

.PP
\fBGLESRenderer::~GLESRenderer\fP We need to delete the shaders here\&. They can not be added to the child list, because they live in render thread\&. 
.PP
Definition at line 108 of file glesrenderer\&.cpp\&.
.SH "Member Function Documentation"
.PP 
.SS "bool GLESRenderer::activateAttributeArray (\fBAttributeLocation\fP arrayLocation, const QVector2D * values, int stride = \fC0\fP)"
Enables 2D Vertex, normal, color or texCoord arrays and sets start adresses of arrays Type may be: VERTEX_LOCATION, NORMAL_LOCATION, COLOR_LOCATION, TEXCOORD_LOCATION
.PP
Enables Vertex, normal, color or texCoord arrays and sets start adresses of arrays arrayLocation may be: VERTEX_LOCATION, NORMAL_LOCATION, COLOR_LOCATION, TEXCOORD_LOCATION 
.PP
Definition at line 654 of file glesrenderer\&.cpp\&.
.SS "bool GLESRenderer::activateAttributeArray (\fBAttributeLocation\fP arrayLocation, const QVector3D * values, int stride = \fC0\fP)"
Enables 3D Vertex, normal, color or texCoord arrays and sets start adresses of arrays Type may be: VERTEX_LOCATION, NORMAL_LOCATION, COLOR_LOCATION, TEXCOORD_LOCATION
.PP
Enables Vertex, normal, color or texCoord arrays and sets start adresses of arrays arrayLocation may be: VERTEX_LOCATION, NORMAL_LOCATION, COLOR_LOCATION, TEXCOORD_LOCATION 
.PP
Definition at line 662 of file glesrenderer\&.cpp\&.
.SS "bool GLESRenderer::activateAttributeArray (\fBAttributeLocation\fP arrayLocation, const \fBGLColorRgba\fP * values, int stride = \fC0\fP)"
Enables 4D Vertex or color arrays and sets start adresses of arrays Type may be: VERTEX_LOCATION, COLOR_LOCATION
.PP
Enables Vertex, normal, color or texCoord arrays and sets start adresses of arrays arrayLocation may be: VERTEX_LOCATION, NORMAL_LOCATION, COLOR_LOCATION, TEXCOORD_LOCATION 
.PP
Definition at line 670 of file glesrenderer\&.cpp\&.
.SS "bool GLESRenderer::activateAttributeArray (\fBAttributeLocation\fP arrayLocation, const float * values, int tupleSize, int stride = \fC0\fP)\fC [protected]\fP"

.PP
activateAttributeArray Enables Vertex, normal, color or texCoord arrays and sets start adresses of arrays location may be: VERTEX_LOCATION, NORMAL_LOCATION, COLOR_LOCATION, TEXCOORD_LOCATION 
.PP
\fBParameters:\fP
.RS 4
\fIlocation\fP 
.br
\fIvalues\fP Address of first number 
.br
\fItupleSize\fP Numbers per vertex 
.br
\fIstride\fP Distance to next tuple 
.RE
.PP
\fBReturns:\fP
.RS 4
.RE
.PP
Enables Vertex, normal, color or texCoord arrays and sets start adresses of arrays arrayLocation may be: VERTEX_LOCATION, NORMAL_LOCATION, COLOR_LOCATION, TEXCOORD_LOCATION 
.PP
Definition at line 679 of file glesrenderer\&.cpp\&.
.SS "void GLESRenderer::activateAttributeBuffer (\fBGLESRenderer::AttributeLocation\fP bufferLocation)"
To be used with arrays (e\&.g\&. QVector<GLPoint>) of \fBGLPoint\fP objects\&. Enables 3D Vertex, normal, color or texCoord buffer location may be: VERTEX_LOCATION, NORMAL_LOCATION, COLOR_LOCATION, TEXCOORD_LOCATION tupleSize is set to 3 for VERTEX_LOCATION, NORMAL_LOCATION, TEXCOORD_LOCATION, to 4 for COLOR_LOCATION 
.PP
Definition at line 701 of file glesrenderer\&.cpp\&.
.SS "void GLESRenderer::addTransformation (const QMatrix4x4 additionalTransformation)"

.PP
addTransformation Multiplies additionalTransformation to mvMatrix\&. 
.PP
\fBParameters:\fP
.RS 4
\fIadditionalTransformation\fP 
.RE
.PP

.PP
Definition at line 466 of file glesrenderer\&.cpp\&.
.SS "bool GLESRenderer::bind ()\fC [virtual]\fP"
Bind program and transfer attribute and uniform data to the shaders\&. Calls initialize, if not alraedy initialized\&. Returns false, if binding failed\&.
.PP
Bind program and transfer attribute and uniform data to the shaders\&. Calls initialize, if not already initialized\&. 
.PP
Definition at line 592 of file glesrenderer\&.cpp\&.
.SS "void GLESRenderer::calculateMousePoints (QVector3D * nearPoint, QVector3D * farPoint, const QPoint & mousePos)"
Returns the points on near and far clipping plane, that correspond to the mouseX and mouseY coordinates of a mouse click\&. mouseX and mouseY are coordinates as delivered by QMouseEvent or QDeclarativeMouseEvent\&. 
.PP
Definition at line 259 of file glesrenderer\&.cpp\&.
.SS "QVector3D GLESRenderer::clipToViewport (const QVector3D & v)"
Performs viewport transform\&. Mainly for debugging\&. 
.PP
Definition at line 769 of file glesrenderer\&.cpp\&.
.SS "void GLESRenderer::disableAttributeArrays ()\fC [virtual]\fP"
Disables all enabled attribute arrays\&. To be called after rendering an object\&.
.PP
Disables all enabled attribute arrays\&. 
.PP
Definition at line 723 of file glesrenderer\&.cpp\&.
.SS "float GLESRenderer::distanceToMouseClick (QVector3D p, const QPoint & mousePos)"
Calculate the distance of the 'mouse ray line' to point p in model space\&. mouseX, mouseY are the coordinates of the mouse click as delivered by QMouseEvent\&. Returns distance\&. 
.PP
Definition at line 273 of file glesrenderer\&.cpp\&.
.SS "const QMatrix4x4& GLESRenderer::getMvMatrix ()\fC [inline]\fP"
Getter for debugging\&. 
.PP
Definition at line 188 of file glesrenderer\&.h\&.
.SS "const QMatrix3x3& GLESRenderer::getNormalMatrix ()\fC [inline]\fP"
Getter for debugging\&. 
.PP
Definition at line 192 of file glesrenderer\&.h\&.
.SS "const QMatrix4x4& GLESRenderer::getPMatrix ()\fC [inline]\fP"
Getter for debugging\&. 
.PP
Definition at line 207 of file glesrenderer\&.h\&.
.SS "bool GLESRenderer::initialize ()\fC [virtual]\fP"
Compile shaders, get attribute and uniform locations of shaders\&. This function needs an active OpenGL context\&. Returns false, if initialization failed\&.
.PP
Compile shaders, get attribute and uniform locations\&. This function needs an active OpenGL context\&. 
.PP
Definition at line 508 of file glesrenderer\&.cpp\&.
.SS "bool GLESRenderer::isColorArrayEnabled ()\fC [inline]\fP"
Returns lighting flag\&. 
.PP
Definition at line 273 of file glesrenderer\&.h\&.
.SS "bool GLESRenderer::isLightingEnabled ()\fC [inline]\fP"
Returns lighting flag\&. 
.PP
Definition at line 264 of file glesrenderer\&.h\&.
.SS "bool GLESRenderer::isMaskActive ()\fC [inline]\fP"

.PP
isMaskActive 
.PP
\fBReturns:\fP
.RS 4
Returns mask flag\&. 
.RE
.PP

.PP
Definition at line 292 of file glesrenderer\&.h\&.
.SS "bool GLESRenderer::isTextureEnabled ()\fC [inline]\fP"
Returns texture flag; 
.PP
Definition at line 282 of file glesrenderer\&.h\&.
.SS "const QVector3D GLESRenderer::lightDirection ()\fC [inline]\fP"
Getter\&. 
.PP
Definition at line 301 of file glesrenderer\&.h\&.
.SS "QVector3D GLESRenderer::modelToClip (const QVector3D & v)"
Multiplies current mvp matrix with v\&. Mainly for debugging\&. 
.PP
Definition at line 758 of file glesrenderer\&.cpp\&.
.SS "bool GLESRenderer::mouseIntersection (QVector3D * intersection, QVector3D normal, float d, const QPoint & mousePos)"
Calculates intersection of 'mouse ray line' with the plane defined by normal and d\&. mouseX, mouseY are the coordinates of the mouse click as delivered by QMouseEvent\&. Returns true, if intersection is in the visible frustum, else returns false\&. If return value is true, \fIintersection is the intersection of the mouse ray line with the plane normal\fP(x,y,z) + d = 0\&. If return value is false, *intersection is not modified\&. 
.PP
Definition at line 293 of file glesrenderer\&.cpp\&.
.SS "float GLESRenderer::pointSize ()\fC [inline]\fP"
Returns pointSize; 
.PP
Definition at line 322 of file glesrenderer\&.h\&.
.SS "void GLESRenderer::popMvMatrix ()"
Pops mvMatrix from stack and updates normalMatrix and mvpMatrix\&. 
.PP
Definition at line 443 of file glesrenderer\&.cpp\&.
.SS "void GLESRenderer::pushMvMatrix ()\fC [inline]\fP"
Pushes mvMatrix\&. 
.PP
Definition at line 327 of file glesrenderer\&.h\&.
.SS "void GLESRenderer::readGLViewportSettings ()"
Get the present viewport settings from GL engine
.PP
get the present settings from GL engine 
.PP
Definition at line 745 of file glesrenderer\&.cpp\&.
.SS "void GLESRenderer::release ()"
Releases program\&. To be called, when all rendering is finished\&. Calls disableAttributeArrays and releases program\&.
.PP
Releases program\&. To be called, when all rendering is finished\&. 
.PP
Definition at line 733 of file glesrenderer\&.cpp\&.
.SS "void GLESRenderer::rotate (GLfloat angle, const QVector3D & axis)"
Rotates mvMatrix by angle around axis 
.PP
Definition at line 460 of file glesrenderer\&.cpp\&.
.SS "void GLESRenderer::rotate (float angle, float x, float y, float z)"
Rotates mvMatrix by angle around axis (x,y,z) 
.PP
Definition at line 480 of file glesrenderer\&.cpp\&.
.SS "void GLESRenderer::scale (const QVector3D & v)"
Scales mvMatrix\&. 
.PP
Definition at line 474 of file glesrenderer\&.cpp\&.
.SS "void GLESRenderer::setAmbientAndDiffuseColor (const \fBGLColorRgba\fP newVal)"
Set the color for ambient and diffuse lighting (or no lighting)\&. Alternatively use a color array and color attribute\&. Defaults to white\&.
.PP
Set the color for ambient and diffuse lighting (or no lighting)\&. Alternatively use a color array and color attribute\&. 
.PP
Definition at line 314 of file glesrenderer\&.cpp\&.
.SS "void GLESRenderer::setAmbientLightBrightness (float newVal)"
Set the dimming factor for ambient light\&. Defaults to 0\&.2\&. 
.PP
Definition at line 325 of file glesrenderer\&.cpp\&.
.SS "void GLESRenderer::setColorArrayEnabled (bool newVal)"
Enable / disable color array\&. Defaults to false\&.
.PP
Enable / disable color array\&. 
.PP
Definition at line 367 of file glesrenderer\&.cpp\&.
.SS "void GLESRenderer::setLightDirection (const QVector3D & newVal)"
Set light direction\&. Defaults to (1\&.0, 1\&.0, 1\&.0)
.PP
Set light direction\&. 
.PP
Definition at line 394 of file glesrenderer\&.cpp\&.
.SS "void GLESRenderer::setLightingEnabled (bool newVal)"
Enable / disable lighting\&. Defaults to false\&.
.PP
Enable / disable lighting\&. 
.PP
Definition at line 357 of file glesrenderer\&.cpp\&.
.SS "void GLESRenderer::setLookAt (const QVector3D & eye, const QVector3D & center, const QVector3D & up)"
Sets mvMatrix to a lookAt transformation\&. Call setPMatrix or setPerspective first\&. 
.PP
Definition at line 143 of file glesrenderer\&.cpp\&.
.SS "void GLESRenderer::setMaskActive (bool newVal)"

.PP
setMaskActive Set the fragment shader mask flag 
.PP
\fBParameters:\fP
.RS 4
\fInewVal\fP 
.RE
.PP

.PP
Definition at line 384 of file glesrenderer\&.cpp\&.
.SS "void GLESRenderer::setMaskCenter (const QPoint & newVal)"

.PP
setMaskCenter Set center of fragment shader mask 
.PP
\fBParameters:\fP
.RS 4
\fInewVal\fP New center in viewport coordinates 
.RE
.PP

.PP
Definition at line 426 of file glesrenderer\&.cpp\&.
.SS "void GLESRenderer::setMaskDiameter (float newVal)"

.PP
setMaskDiameter Set diameter of fragment shader mask 
.PP
\fBParameters:\fP
.RS 4
\fInewVal\fP New diameter in pixels\&. 
.RE
.PP

.PP
Definition at line 433 of file glesrenderer\&.cpp\&.
.SS "void GLESRenderer::setMvMatrix (const QMatrix4x4 newVal)"
Getters and setters for uniformsSet modelview matrix\&. Updates mvpMatrix and normalMatrix too\&. Call setPMatrix or setPerspective first\&.
.PP
Set modelview matrix\&. Updates mvpMatrix and normalMatrix too\&. Call setPMatrix first\&. 
.PP
Definition at line 120 of file glesrenderer\&.cpp\&.
.SS "void GLESRenderer::setOrtho (float left, float right, float bottom, float top, float nearPlane, float farPlane)"

.PP
setOrtho Set pMatrix to an orthogonal projection\&. 
.PP
\fBParameters:\fP
.RS 4
\fIleft\fP 
.br
\fIright\fP 
.br
\fIbottom\fP 
.br
\fItop\fP 
.br
\fInearPlane\fP 
.br
\fIfarPlane\fP 
.RE
.PP

.PP
Definition at line 181 of file glesrenderer\&.cpp\&.
.SS "void GLESRenderer::setPerspective (GLfloat fovy, GLfloat aspect, GLfloat nearClip, GLfloat farClip)"
Setup projection matrix\&. Call setMvMatrix after this\&. 
.PP
Definition at line 165 of file glesrenderer\&.cpp\&.
.SS "void GLESRenderer::setPMatrix (const QMatrix4x4 newVal)"
Set projection matrix\&. Call setMvMatrix after this\&. 
.PP
Definition at line 154 of file glesrenderer\&.cpp\&.
.SS "void GLESRenderer::setPointSize (float newVal)"
Set size of points drawn with GL_POINTS\&. Defaults to 2\&.0\&.
.PP
Set size of points drawn with GL_POINTS\&. 
.PP
Definition at line 416 of file glesrenderer\&.cpp\&.
.SS "void GLESRenderer::setShininess (float newVal)"
Set the shininess (exponent) for specular lighting\&. Defaults to 200\&.
.PP
Set the shininess for specular lighting\&. 
.PP
Definition at line 347 of file glesrenderer\&.cpp\&.
.SS "void GLESRenderer::setSpecularColor (const \fBGLColorRgba\fP newVal)"
Set the color for specular lighting\&. Defaults to white\&.
.PP
Set the color for specular lighting\&. 
.PP
Definition at line 335 of file glesrenderer\&.cpp\&.
.SS "void GLESRenderer::setTextureEnabled (bool newVal)"
Set the texture flag\&. Defaults to false\&.
.PP
Set the texture flag\&. 
.PP
Definition at line 377 of file glesrenderer\&.cpp\&.
.SS "void GLESRenderer::setViewport (int x, int y, int w, int h)"
Set viewport Viewport coordinates must be given as GL-viewport coordinates, where lower left is (0,0)\&.
.PP
Set viewport 
.PP
Definition at line 200 of file glesrenderer\&.cpp\&.
.SS "void GLESRenderer::transform (const QMatrix4x4 & transformation)"

.PP
transform Multiplies mvMatrix with transformation 
.PP
\fBParameters:\fP
.RS 4
\fItransformation\fP 
.RE
.PP

.PP
Definition at line 493 of file glesrenderer\&.cpp\&.
.SS "void GLESRenderer::translate (const QVector3D & v)"
Translates mvMatrix by v 
.PP
Definition at line 451 of file glesrenderer\&.cpp\&.
.SS "void GLESRenderer::translate (float x, float y, float z)"

.PP
Definition at line 498 of file glesrenderer\&.cpp\&.
.SS "QVector3D GLESRenderer::unProjectViewportPoint (const QVector3D & vWin)"
Uses viewport and matrix settings to reverse the vertex transformation chain\&. vWin x,y and z are the coordinates in window coordinates\&. Lower left of viewport is winX = 0, winY = 0\&. Use winZ = 0\&.0 for a point on near clipping plane and winZ = 1\&.0 for a point on far clipping plane\&. This function assumes, that the vertex shader computes gl_positon as v * mvpMatrix\&. Use a custom shader reverse function, if this is not true\&. Returns coordinate in object space\&.
.PP
Uses viewport and matrix settings to reverse the vertex transformation chain\&. WinX, winY, winZ are the coordinates in window coordinates\&. Lower left of viewport is winX = 0, winY = 0\&. Use winZ = 0\&.0 for a point on near clipping plane and winZ = 1\&.0 for a point on far clipping plane\&. This function assumes, that the vertex shader computes gl_positon as v * mvpMatrix\&. Use a custom shader reverse function, if this is not true\&. Returns coordinate in object space\&. 
.PP
Definition at line 217 of file glesrenderer\&.cpp\&.
.SS "QVector3D GLESRenderer::viewportToClip (const QVector3D & vWin)"
Performs inverse viewport transform\&. 
.PP
Definition at line 235 of file glesrenderer\&.cpp\&.
.SS "void GLESRenderer::zoom (float zoomFactor)"

.PP
Definition at line 485 of file glesrenderer\&.cpp\&.
.SH "Member Data Documentation"
.PP 
.SS "QList<int> GLESRenderer::m_activeAttributeLocations\fC [protected]\fP"

.PP
Definition at line 505 of file glesrenderer\&.h\&.
.SS "\fBGLColorRgba\fP GLESRenderer::m_ambientAndDiffuseColor\fC [protected]\fP"

.PP
Definition at line 464 of file glesrenderer\&.h\&.
.SS "float GLESRenderer::m_ambientLightBrightness\fC [protected]\fP"

.PP
Definition at line 465 of file glesrenderer\&.h\&.
.SS "float GLESRenderer::m_aspect\fC [protected]\fP"

.PP
Definition at line 455 of file glesrenderer\&.h\&.
.SS "bool GLESRenderer::m_bound\fC [protected]\fP"

.PP
Definition at line 436 of file glesrenderer\&.h\&.
.SS "bool GLESRenderer::m_colorArrayEnabled\fC [protected]\fP"

.PP
Definition at line 441 of file glesrenderer\&.h\&.
.SS "float GLESRenderer::m_farClip\fC [protected]\fP"

.PP
Definition at line 457 of file glesrenderer\&.h\&.
.SS "float GLESRenderer::m_fovy\fC [protected]\fP"

.PP
Definition at line 454 of file glesrenderer\&.h\&.
.SS "QOpenGLShader* GLESRenderer::m_fShader\fC [protected]\fP"

.PP
Definition at line 479 of file glesrenderer\&.h\&.
.SS "QString GLESRenderer::m_fShaderFileName\fC [protected]\fP"

.PP
Definition at line 477 of file glesrenderer\&.h\&.
.SS "QVector3D GLESRenderer::m_halfPlaneVector\fC [protected]\fP"

.PP
Definition at line 463 of file glesrenderer\&.h\&.
.SS "bool GLESRenderer::m_initialized\fC [protected]\fP"

.PP
Definition at line 435 of file glesrenderer\&.h\&.
.SS "QMatrix4x4 GLESRenderer::m_invertedMvpMatrix\fC [protected]\fP"

.PP
Definition at line 450 of file glesrenderer\&.h\&.
.SS "bool GLESRenderer::m_invertedMvpMatrixValid\fC [protected]\fP"

.PP
Definition at line 443 of file glesrenderer\&.h\&.
.SS "QVector3D GLESRenderer::m_lightDirection\fC [protected]\fP"

.PP
Definition at line 462 of file glesrenderer\&.h\&.
.SS "bool GLESRenderer::m_lightingEnabled\fC [protected]\fP"

.PP
Definition at line 440 of file glesrenderer\&.h\&.
.SS "int GLESRenderer::m_location_aColor\fC [protected]\fP"

.PP
Definition at line 484 of file glesrenderer\&.h\&.
.SS "int GLESRenderer::m_location_aNormal\fC [protected]\fP"

.PP
Definition at line 485 of file glesrenderer\&.h\&.
.SS "int GLESRenderer::m_location_aTexCoord\fC [protected]\fP"

.PP
Definition at line 486 of file glesrenderer\&.h\&.
.SS "int GLESRenderer::m_location_aVertex\fC [protected]\fP"

.PP
Definition at line 483 of file glesrenderer\&.h\&.
.SS "int GLESRenderer::m_location_uAmbientAndDiffuseColor\fC [protected]\fP"

.PP
Definition at line 491 of file glesrenderer\&.h\&.
.SS "int GLESRenderer::m_location_uAmbientLightBrightness\fC [protected]\fP"

.PP
Definition at line 492 of file glesrenderer\&.h\&.
.SS "int GLESRenderer::m_location_uColorArrayEnabled\fC [protected]\fP"

.PP
Definition at line 487 of file glesrenderer\&.h\&.
.SS "int GLESRenderer::m_location_uHalfPlaneVector\fC [protected]\fP"

.PP
Definition at line 496 of file glesrenderer\&.h\&.
.SS "int GLESRenderer::m_location_uLightDirection\fC [protected]\fP"

.PP
Definition at line 495 of file glesrenderer\&.h\&.
.SS "int GLESRenderer::m_location_uLightingEnabled\fC [protected]\fP"

.PP
Definition at line 488 of file glesrenderer\&.h\&.
.SS "int GLESRenderer::m_location_uMaskActive\fC [protected]\fP"

.PP
Definition at line 502 of file glesrenderer\&.h\&.
.SS "int GLESRenderer::m_location_uMaskCenter\fC [protected]\fP"

.PP
Definition at line 501 of file glesrenderer\&.h\&.
.SS "int GLESRenderer::m_location_uMaskDiameter\fC [protected]\fP"

.PP
Definition at line 500 of file glesrenderer\&.h\&.
.SS "int GLESRenderer::m_location_uMvpMatrix\fC [protected]\fP"

.PP
Definition at line 490 of file glesrenderer\&.h\&.
.SS "int GLESRenderer::m_location_uNormalMatrix\fC [protected]\fP"

.PP
Definition at line 489 of file glesrenderer\&.h\&.
.SS "int GLESRenderer::m_location_uPointSize\fC [protected]\fP"

.PP
Definition at line 497 of file glesrenderer\&.h\&.
.SS "int GLESRenderer::m_location_uShininess\fC [protected]\fP"

.PP
Definition at line 494 of file glesrenderer\&.h\&.
.SS "int GLESRenderer::m_location_uSpecularColor\fC [protected]\fP"

.PP
Definition at line 493 of file glesrenderer\&.h\&.
.SS "int GLESRenderer::m_location_uTextureEnabled\fC [protected]\fP"

.PP
Definition at line 499 of file glesrenderer\&.h\&.
.SS "int GLESRenderer::m_location_uTextureSampler\fC [protected]\fP"

.PP
Definition at line 498 of file glesrenderer\&.h\&.
.SS "bool GLESRenderer::m_maskActive\fC [protected]\fP"

.PP
Definition at line 444 of file glesrenderer\&.h\&.
.SS "QPoint GLESRenderer::m_maskCenter\fC [protected]\fP"

.PP
Definition at line 473 of file glesrenderer\&.h\&.
.SS "float GLESRenderer::m_maskDiameter\fC [protected]\fP"

.PP
Definition at line 472 of file glesrenderer\&.h\&.
.SS "QMatrix4x4 GLESRenderer::m_mvMatrix\fC [protected]\fP"

.PP
Definition at line 452 of file glesrenderer\&.h\&.
.SS "QStack<QMatrix4x4> GLESRenderer::m_mvMatrixStack\fC [protected]\fP"

.PP
Definition at line 451 of file glesrenderer\&.h\&.
.SS "QMatrix4x4 GLESRenderer::m_mvpMatrix\fC [protected]\fP"

.PP
Definition at line 447 of file glesrenderer\&.h\&.
.SS "float GLESRenderer::m_nearClip\fC [protected]\fP"

.PP
Definition at line 456 of file glesrenderer\&.h\&.
.SS "QMatrix3x3 GLESRenderer::m_normalMatrix\fC [protected]\fP"

.PP
Definition at line 459 of file glesrenderer\&.h\&.
.SS "bool GLESRenderer::m_OrthoMode\fC [protected]\fP"

.PP
Definition at line 458 of file glesrenderer\&.h\&.
.SS "QMatrix4x4 GLESRenderer::m_pMatrix\fC [protected]\fP"

.PP
Definition at line 453 of file glesrenderer\&.h\&.
.SS "float GLESRenderer::m_pointSize\fC [protected]\fP"

.PP
Definition at line 470 of file glesrenderer\&.h\&.
.SS "QOpenGLShaderProgram* GLESRenderer::m_renderProgram\fC [protected]\fP"

.PP
Definition at line 480 of file glesrenderer\&.h\&.
.SS "float GLESRenderer::m_shininess\fC [protected]\fP"

.PP
Definition at line 467 of file glesrenderer\&.h\&.
.SS "\fBGLColorRgba\fP GLESRenderer::m_specularColor\fC [protected]\fP"

.PP
Definition at line 466 of file glesrenderer\&.h\&.
.SS "bool GLESRenderer::m_textureEnabled\fC [protected]\fP"

.PP
Definition at line 442 of file glesrenderer\&.h\&.
.SS "int GLESRenderer::m_viewportH\fC [protected]\fP"

.PP
Definition at line 510 of file glesrenderer\&.h\&.
.SS "int GLESRenderer::m_viewportW\fC [protected]\fP"

.PP
Definition at line 509 of file glesrenderer\&.h\&.
.SS "int GLESRenderer::m_viewportX\fC [protected]\fP"

.PP
Definition at line 507 of file glesrenderer\&.h\&.
.SS "int GLESRenderer::m_viewportY\fC [protected]\fP"

.PP
Definition at line 508 of file glesrenderer\&.h\&.
.SS "QOpenGLShader* GLESRenderer::m_vShader\fC [protected]\fP"

.PP
Definition at line 478 of file glesrenderer\&.h\&.
.SS "QString GLESRenderer::m_vShaderFileName\fC [protected]\fP"

.PP
Definition at line 476 of file glesrenderer\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for 4Gewinnt from the source code\&.
